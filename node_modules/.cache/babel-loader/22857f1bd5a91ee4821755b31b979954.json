{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _ListView from \"antd-mobile/lib/list-view\";\nimport _List from \"antd-mobile/lib/list\";\nimport React from 'react';\nimport styles from \"./CityList.less\";\nvar Item = _List.Item;\nvar IndexedList = _ListView.IndexedList;\n\nfunction genData(ds, provinceData) {\n  var dataBlob = {};\n  var sectionIDs = [];\n  var rowIDs = [];\n\n  _Object$keys(provinceData).forEach(function (item, index) {\n    sectionIDs.push(item);\n    dataBlob[item] = item;\n    rowIDs[index] = [];\n    provinceData[item].forEach(function (city) {\n      rowIDs[index].push(city.value);\n      dataBlob[city.value] = city.label;\n    });\n  });\n\n  return ds.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs);\n}\n\nvar CityList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CityList, _React$Component);\n\n  function CityList(props) {\n    var _this;\n\n    _classCallCheck(this, CityList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CityList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickItem\", function (city) {\n      return function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        _this.props.onClickItem(city);\n      };\n    });\n\n    var getSectionData = function getSectionData(dataBlob, sectionID) {\n      return dataBlob[sectionID];\n    };\n\n    var getRowData = function getRowData(dataBlob, _, rowID) {\n      return dataBlob[rowID];\n    };\n\n    var dataSource = new _ListView.DataSource({\n      getRowData: getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1 !== row2;\n      },\n      sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {\n        return s1 !== s2;\n      }\n    });\n    _this.state = {\n      dataSource: dataSource,\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(CityList, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        dataSource: genData(this.state.dataSource, this.props.list),\n        isLoading: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.isLoading) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.cityListWrapper\n      }, React.createElement(IndexedList, {\n        dataSource: this.state.dataSource,\n        useBodyScroll: true,\n        renderSectionHeader: function renderSectionHeader(sectionData) {\n          return React.createElement(\"span\", null, sectionData);\n        },\n        renderRow: function renderRow(rowData) {\n          return React.createElement(Item, {\n            onClick: _this2.onClickItem(rowData)\n          }, rowData);\n        },\n        renderHeader: this.props.renderHeader\n      }));\n    }\n  }]);\n\n  return CityList;\n}(React.Component);\n\nexport default CityList;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/CityList/CityList.tsx"],"names":["React","styles","Item","IndexedList","genData","ds","provinceData","dataBlob","sectionIDs","rowIDs","forEach","item","index","push","city","value","label","cloneWithRowsAndSections","CityList","props","e","stopPropagation","preventDefault","onClickItem","getSectionData","sectionID","getRowData","_","rowID","dataSource","DataSource","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","state","isLoading","setState","list","cityListWrapper","sectionData","rowData","renderHeader","Component"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP;AAEA,IAAMC,IAAI,GAAG,MAAKA,IAAlB;AACA,IAAMC,WAAW,GAAG,UAASA,WAA7B;;AAMA,SAASC,OAAT,CAAiBC,EAAjB,EAA0BC,YAA1B,EAAgD;AAC9C,MAAMC,QAAqC,GAAG,EAA9C;AACA,MAAMC,UAAoB,GAAG,EAA7B;AACA,MAAMC,MAAkB,GAAG,EAA3B;;AACA,eAAYH,YAAZ,EAA0BI,OAA1B,CAAkC,UAACC,IAAD,EAAeC,KAAf,EAAiC;AACjEJ,IAAAA,UAAU,CAACK,IAAX,CAAgBF,IAAhB;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR,GAAiBA,IAAjB;AACAF,IAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,EAAhB;AAEAN,IAAAA,YAAY,CAACK,IAAD,CAAZ,CAAmBD,OAAnB,CAA2B,UAAAI,IAAI,EAAI;AACjCL,MAAAA,MAAM,CAACG,KAAD,CAAN,CAAcC,IAAd,CAAmBC,IAAI,CAACC,KAAxB;AACAR,MAAAA,QAAQ,CAACO,IAAI,CAACC,KAAN,CAAR,GAAuBD,IAAI,CAACE,KAA5B;AACD,KAHD;AAID,GATD;;AAUA,SAAOX,EAAE,CAACY,wBAAH,CAA4BV,QAA5B,EAAsCC,UAAtC,EAAkDC,MAAlD,CAAP;AACD;;IAaKS,Q;;;;;AACJ,oBAAYC,KAAZ,EAAkC;AAAA;;AAAA;;AAChC,kFAAMA,KAAN;;AADgC,kEAyBpB,UAACL,IAAD;AAAA,aAAkB,UAACM,CAAD,EAAyB;AACvDA,QAAAA,CAAC,CAACC,eAAF;AACAD,QAAAA,CAAC,CAACE,cAAF;;AACA,cAAKH,KAAL,CAAWI,WAAX,CAAuBT,IAAvB;AACD,OAJa;AAAA,KAzBoB;;AAEhC,QAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACjB,QAAD,EAAwCkB,SAAxC;AAAA,aAA8DlB,QAAQ,CAACkB,SAAD,CAAtE;AAAA,KAAvB;;AACA,QAAMC,UAAU,GAAG,SAAbA,UAAa,CAACnB,QAAD,EAAwCoB,CAAxC,EAAmDC,KAAnD;AAAA,aAAqErB,QAAQ,CAACqB,KAAD,CAA7E;AAAA,KAAnB;;AAEA,QAAMC,UAAU,GAAG,IAAI,UAASC,UAAb,CAAwB;AACzCJ,MAAAA,UAAU,EAAVA,UADyC;AAEzCK,MAAAA,oBAAoB,EAAEP,cAFmB;AAGzCQ,MAAAA,aAAa,EAAE,uBAACC,IAAD,EAAeC,IAAf;AAAA,eAAgCD,IAAI,KAAKC,IAAzC;AAAA,OAH0B;AAIzCC,MAAAA,uBAAuB,EAAE,iCAACC,EAAD,EAAaC,EAAb;AAAA,eAA4BD,EAAE,KAAKC,EAAnC;AAAA;AAJgB,KAAxB,CAAnB;AAOA,UAAKC,KAAL,GAAa;AACXT,MAAAA,UAAU,EAAVA,UADW;AAEXU,MAAAA,SAAS,EAAE;AAFA,KAAb;AAZgC;AAgBjC;;;;yCAEoB;AACnB,WAAKC,QAAL,CAAc;AACZX,QAAAA,UAAU,EAAEzB,OAAO,CAAC,KAAKkC,KAAL,CAAWT,UAAZ,EAAwB,KAAKV,KAAL,CAAWsB,IAAnC,CADP;AAEZF,QAAAA,SAAS,EAAE;AAFC,OAAd;AAID;;;6BAQQ;AAAA;;AACP,UAAI,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAEtC,MAAM,CAACyC;AAAvB,SACE,oBAAC,WAAD;AACE,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWT,UADzB;AAEE,QAAA,aAAa,EAAE,IAFjB;AAGE,QAAA,mBAAmB,EAAE,6BAAAc,WAAW;AAAA,iBAAI,kCAAOA,WAAP,CAAJ;AAAA,SAHlC;AAIE,QAAA,SAAS,EAAE,mBAAAC,OAAO;AAAA,iBAAI,oBAAC,IAAD;AAAM,YAAA,OAAO,EAAE,MAAI,CAACrB,WAAL,CAAiBqB,OAAjB;AAAf,aAA2CA,OAA3C,CAAJ;AAAA,SAJpB;AAKE,QAAA,YAAY,EAAE,KAAKzB,KAAL,CAAW0B;AAL3B,QADF,CADF;AAWD;;;;EAhDoB7C,KAAK,CAAC8C,S;;AAmD7B,eAAe5B,QAAf","sourcesContent":["import { List, ListView } from 'antd-mobile'\nimport React from 'react'\nimport styles from './CityList.less'\n\nconst Item = List.Item\nconst IndexedList = ListView.IndexedList\n\ninterface Cities {\n  [index: string]: { label: string; value: string }[]\n}\n\nfunction genData(ds: any, provinceData: Cities) {\n  const dataBlob: { [index: string]: string } = {}\n  const sectionIDs: string[] = []\n  const rowIDs: string[][] = []\n  Object.keys(provinceData).forEach((item: string, index: number) => {\n    sectionIDs.push(item)\n    dataBlob[item] = item\n    rowIDs[index] = []\n\n    provinceData[item].forEach(city => {\n      rowIDs[index].push(city.value)\n      dataBlob[city.value] = city.label\n    })\n  })\n  return ds.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs)\n}\n\ninterface CityListProps {\n  list: Cities\n  onClickItem: (city: string) => void\n  renderHeader: () => React.ReactElement<any>\n}\n\ninterface CityListState {\n  dataSource: unknown\n  isLoading: boolean\n}\n\nclass CityList extends React.Component<CityListProps, CityListState> {\n  constructor(props: CityListProps) {\n    super(props)\n    const getSectionData = (dataBlob: { [index: string]: string }, sectionID: string) => dataBlob[sectionID]\n    const getRowData = (dataBlob: { [index: string]: string }, _: string, rowID: string) => dataBlob[rowID]\n\n    const dataSource = new ListView.DataSource({\n      getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: (row1: string, row2: string) => row1 !== row2,\n      sectionHeaderHasChanged: (s1: string, s2: string) => s1 !== s2,\n    })\n\n    this.state = {\n      dataSource,\n      isLoading: true,\n    }\n  }\n\n  componentWillMount() {\n    this.setState({\n      dataSource: genData(this.state.dataSource, this.props.list),\n      isLoading: false,\n    })\n  }\n\n  onClickItem = (city: string) => (e: React.MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    this.props.onClickItem(city)\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return null\n    }\n\n    return (\n      <div className={styles.cityListWrapper}>\n        <IndexedList\n          dataSource={this.state.dataSource}\n          useBodyScroll={true}\n          renderSectionHeader={sectionData => <span>{sectionData}</span>}\n          renderRow={rowData => <Item onClick={this.onClickItem(rowData)}>{rowData}</Item>}\n          renderHeader={this.props.renderHeader}\n        />\n      </div>\n    )\n  }\n}\n\nexport default CityList\n"]},"metadata":{},"sourceType":"module"}