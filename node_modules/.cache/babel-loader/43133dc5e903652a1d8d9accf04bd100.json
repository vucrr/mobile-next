{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getHeaders2 } from 'actions/actionHelper';\nimport { SMS_TYPES } from 'constant/common';\nimport axios from 'utils/axiosClient';\nimport * as tools from 'utils/tools';\nexport var getCaptchaImage = function getCaptchaImage(phone) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SMS_TYPES.BindPhone;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_) {\n        var url, params, headers, _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = 'node-api/captcha/image';\n                params = {\n                  phone: phone,\n                  type: type\n                };\n                headers = getHeaders2();\n                _context.prev = 3;\n                _context.next = 6;\n                return axios.get(url, {\n                  params: params,\n                  headers: headers\n                });\n\n              case 6:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                return _context.abrupt(\"return\", data.image_code);\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](3);\n                tools.ErrorLog(_context.t0);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var verifySMS = function verifySMS(phone, smsCode) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SMS_TYPES.BindPhone;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_) {\n        var url, body, headers, _ref4, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = 'node-api/captcha/sms';\n                body = {\n                  phone: phone,\n                  type: type,\n                  sms_code: smsCode\n                };\n                headers = getHeaders2();\n                _context2.prev = 3;\n                _context2.next = 6;\n                return axios.post(url, body, {\n                  headers: headers\n                });\n\n              case 6:\n                _ref4 = _context2.sent;\n                data = _ref4.data;\n                return _context2.abrupt(\"return\", data);\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](3);\n                tools.ErrorLog(_context2.t0);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 11]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var verifyImageAndSendSMS = function verifyImageAndSendSMS(phone, imageStr) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SMS_TYPES.BindPhone;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_) {\n        var url, params, headers, _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = 'node-api/captcha/sms';\n                params = {\n                  phone: phone,\n                  type: type,\n                  image_code: imageStr\n                };\n                headers = getHeaders2();\n                _context3.prev = 3;\n                _context3.next = 6;\n                return axios.get(url, {\n                  params: params,\n                  headers: headers\n                });\n\n              case 6:\n                _ref6 = _context3.sent;\n                data = _ref6.data;\n                return _context3.abrupt(\"return\", data);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](3);\n                tools.ErrorLog(_context3.t0);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 11]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/viser/mobile-next/src/actions/captcha.ts"],"names":["getHeaders2","SMS_TYPES","axios","tools","getCaptchaImage","phone","type","BindPhone","_","url","params","headers","get","data","image_code","ErrorLog","verifySMS","smsCode","body","sms_code","post","verifyImageAndSendSMS","imageStr"],"mappings":"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","sourcesContent":["import { getHeaders2 } from 'actions/actionHelper'\nimport { SMS_TYPES } from 'constant/common'\nimport { Dispatch } from 'redux'\nimport axios from 'utils/axiosClient'\nimport * as tools from 'utils/tools'\n\nexport const getCaptchaImage = (phone: string, type = SMS_TYPES.BindPhone) => async (_: Dispatch) => {\n  const url = 'node-api/captcha/image'\n  const params = { phone, type }\n  const headers = getHeaders2()\n  try {\n    const { data } = await axios.get(url, { params, headers })\n    return data.image_code\n  } catch (err) {\n    tools.ErrorLog(err)\n  }\n}\n\nexport const verifySMS = (phone: string, smsCode: string, type = SMS_TYPES.BindPhone) => async (_: Dispatch) => {\n  const url = 'node-api/captcha/sms'\n  const body = { phone, type, sms_code: smsCode }\n  const headers = getHeaders2()\n  try {\n    const { data } = await axios.post(url, body, { headers })\n    return data\n  } catch (err) {\n    tools.ErrorLog(err)\n  }\n}\n\nexport const verifyImageAndSendSMS = (phone: string, imageStr: string, type = SMS_TYPES.BindPhone) => async (\n  _: Dispatch,\n) => {\n  const url = 'node-api/captcha/sms'\n  const params = { phone, type, image_code: imageStr }\n  const headers = getHeaders2()\n  try {\n    const { data } = await axios.get(url, { params, headers })\n    return data\n  } catch (err) {\n    tools.ErrorLog(err)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}