{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getHeaders, getHeaders2 } from 'actions/actionHelper';\nimport { FETCH_CENTER_INFO, GET_USER_INFO } from 'constant/index';\nimport { createAction } from 'redux-actions';\nimport { axios, tools } from 'utils';\nexport var receiveInfo = createAction(GET_USER_INFO);\nexport var centerActions = function centerActions(_ref) {\n  var query = _ref.query,\n      req = _ref.req;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var url, headers, _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = 'node-api/account/center';\n                headers = getHeaders(req);\n                _context.prev = 2;\n                _context.next = 5;\n                return axios.get(url, {\n                  params: query,\n                  headers: headers\n                });\n\n              case 5:\n                _ref3 = _context.sent;\n                data = _ref3.data;\n                return _context.abrupt(\"return\", data && dispatch(receiveInfo(data)).payload);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](2);\n                tools.ErrorLog(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchInfo = function fetchInfo(_ref4) {\n  var req = _ref4.req;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var url, headers, _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = 'node-api/account/center/info';\n                headers = getHeaders2(req);\n                _context2.prev = 2;\n                _context2.next = 5;\n                return axios.get(url, {\n                  headers: headers\n                });\n\n              case 5:\n                _ref6 = _context2.sent;\n                data = _ref6.data;\n\n                if (!data) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                dispatch(createAction(FETCH_CENTER_INFO)(data));\n                return _context2.abrupt(\"return\", data);\n\n              case 10:\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](2);\n                tools.ErrorLog(_context2.t0);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 12]]);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/viser/mobile-next/src/actions/account/center.ts"],"names":["getHeaders","getHeaders2","FETCH_CENTER_INFO","GET_USER_INFO","createAction","axios","tools","receiveInfo","centerActions","query","req","dispatch","url","headers","get","params","data","payload","ErrorLog","fetchInfo"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,sBAAxC;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,gBAAjD;AAKA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,OAA7B;AAEA,OAAO,IAAMC,WAAW,GAAGH,YAAY,CAAgBD,aAAhB,CAAhC;AAEP,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,GAAV,QAAUA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAmC,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxDC,gBAAAA,GADwD,GAClD,yBADkD;AAExDC,gBAAAA,OAFwD,GAE9Cb,UAAU,CAACU,GAAD,CAFoC;AAAA;AAAA;AAAA,uBAIrCL,KAAK,CAACS,GAAN,CAAyBF,GAAzB,EAA8B;AAAEG,kBAAAA,MAAM,EAAEN,KAAV;AAAiBI,kBAAAA,OAAO,EAAPA;AAAjB,iBAA9B,CAJqC;;AAAA;AAAA;AAIpDG,gBAAAA,IAJoD,SAIpDA,IAJoD;AAAA,iDAKrDA,IAAI,IAAIL,QAAQ,CAACJ,WAAW,CAACS,IAAD,CAAZ,CAAR,CAA4BC,OALiB;;AAAA;AAAA;AAAA;AAO5DX,gBAAAA,KAAK,CAACY,QAAN;;AAP4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAWP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGT,GAAH,SAAGA,GAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAkB,kBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCC,gBAAAA,GADmC,GAC7B,8BAD6B;AAEnCC,gBAAAA,OAFmC,GAEzBZ,WAAW,CAACS,GAAD,CAFc;AAAA;AAAA;AAAA,uBAIhBL,KAAK,CAACS,GAAN,CAA2BF,GAA3B,EAAgC;AAAEC,kBAAAA,OAAO,EAAPA;AAAF,iBAAhC,CAJgB;;AAAA;AAAA;AAI/BG,gBAAAA,IAJ+B,SAI/BA,IAJ+B;;AAAA,qBAKnCA,IALmC;AAAA;AAAA;AAAA;;AAMrCL,gBAAAA,QAAQ,CAACP,YAAY,CAAkBF,iBAAlB,CAAZ,CAAiDc,IAAjD,CAAD,CAAR;AANqC,kDAO9BA,IAP8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUvCV,gBAAAA,KAAK,CAACY,QAAN;;AAVuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import { getHeaders, getHeaders2 } from 'actions/actionHelper'\nimport { FETCH_CENTER_INFO, GET_USER_INFO } from 'constant/index'\nimport { MyCenterReturns } from 'interfaces/account/center'\nimport { CenterReturns } from 'interfaces/center'\nimport { ClientRequest } from 'interfaces/router'\nimport { Action, Dispatch } from 'redux'\nimport { createAction } from 'redux-actions'\nimport { axios, tools } from 'utils'\n\nexport const receiveInfo = createAction<CenterReturns>(GET_USER_INFO)\n\nexport const centerActions = ({ query, req }: ClientRequest) => async (dispatch: Dispatch<Action>) => {\n  const url = 'node-api/account/center'\n  const headers = getHeaders(req)\n  try {\n    const { data } = await axios.get<CenterReturns>(url, { params: query, headers })\n    return data && dispatch(receiveInfo(data)).payload\n  } catch (err) {\n    tools.ErrorLog(err)\n  }\n}\n\nexport const fetchInfo = ({ req }: any) => async (dispatch: Dispatch<Action>) => {\n  const url = 'node-api/account/center/info'\n  const headers = getHeaders2(req)\n  try {\n    const { data } = await axios.get<MyCenterReturns>(url, { headers })\n    if (data) {\n      dispatch(createAction<MyCenterReturns>(FETCH_CENTER_INFO)(data))\n      return data\n    }\n  } catch (err) {\n    tools.ErrorLog(err)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}