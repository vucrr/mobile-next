{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _TabBar from \"antd-mobile/lib/tab-bar\";\nimport { fetchNavIcons, initTabBar } from 'actions/app';\nimport classnames from 'classnames';\nimport { TrackEventTabBar } from 'configs/trackEventLabels';\nimport Router from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { trackClickEvent } from 'utils/piwik';\nimport NewTabBar from \"./NewTabBar\";\nimport styles from \"./TabBar.less\";\nvar Item = _TabBar.Item;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tabBar: state.getIn(['app', 'tabBar']),\n    serverTabBar: state.getIn(['serverApp', 'tabBar']),\n    navIcons: state.getIn(['app', 'navIcons', 'icons']),\n    isFestival: state.getIn(['app', 'navIcons', 'is_festival'])\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onInitTabBar: bindActionCreators(initTabBar, dispatch),\n    onFetchNavIcons: bindActionCreators(fetchNavIcons, dispatch)\n  };\n};\n\nexport var dicTractEvent = {\n  home: 'HomeIcon',\n  product: 'ClassfyIcon',\n  myCenter: 'MineIcon'\n};\n\nvar MyTabBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyTabBar, _React$Component);\n\n  function MyTabBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyTabBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyTabBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePress\", function (type) {\n      return (\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var serverTabBar;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  serverTabBar = _this.props.serverTabBar;\n                  _context.next = 3;\n                  return Router.push(serverTabBar.getIn([type, 'link']));\n\n                case 3:\n                  window.scrollTo(0, 0);\n                  trackClickEvent({\n                    category: TrackEventTabBar.Category,\n                    label: \"\".concat(dicTractEvent[type])\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))\n      );\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderIcon\", function (icon) {\n      return React.createElement(\"div\", {\n        style: {\n          width: '22px',\n          height: '22px',\n          background: \"url(\".concat(icon, \") center center /  21px 21px no-repeat\")\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(MyTabBar, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this$props, hidden, selectedTab, navIcons, onInitTabBar, onFetchNavIcons;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = this.props, hidden = _this$props.hidden, selectedTab = _this$props.selectedTab, navIcons = _this$props.navIcons, onInitTabBar = _this$props.onInitTabBar, onFetchNavIcons = _this$props.onFetchNavIcons;\n                _context2.t0 = navIcons.size === 0;\n\n                if (!_context2.t0) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 5;\n                return onFetchNavIcons();\n\n              case 5:\n                onInitTabBar({\n                  selectedTab: selectedTab,\n                  show: !hidden\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          tabBar = _this$props2.tabBar,\n          serverTabBar = _this$props2.serverTabBar,\n          hidden = _this$props2.hidden,\n          isFestival = _this$props2.isFestival,\n          navIcons = _this$props2.navIcons;\n      var selectedTab = tabBar.get('selectedTab');\n      var show = tabBar.get('show');\n\n      if (isFestival === 1) {\n        return React.createElement(NewTabBar, this.props);\n      }\n\n      return React.createElement(\"div\", {\n        className: classnames(styles.tabbar_box, show && styles.show, !hidden && styles.fixed)\n      }, React.createElement(_TabBar, {\n        unselectedTintColor: \"#929292\",\n        tintColor: \"#FF5151\",\n        barTintColor: \"white\"\n      }, navIcons.filter(function (item) {\n        return !serverTabBar.getIn([item.get('key'), 'hide']);\n      }).map(function (item) {\n        return React.createElement(Item, {\n          icon: _this2.renderIcon(item.get('icon')),\n          selectedIcon: _this2.renderIcon(item.get('select_icon')),\n          title: item.get('text'),\n          key: item.get('key'),\n          selected: selectedTab === item.get('key'),\n          onPress: _this2.handlePress(item.get('key'))\n        });\n      })));\n    }\n  }]);\n\n  return MyTabBar;\n}(React.Component);\n\n_defineProperty(MyTabBar, \"defaultProps\", {\n  hidden: false,\n  selectedTab: ''\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTabBar);","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/TabBar/TabBar.tsx"],"names":["fetchNavIcons","initTabBar","classnames","TrackEventTabBar","Router","React","connect","bindActionCreators","trackClickEvent","NewTabBar","styles","Item","mapStateToProps","state","tabBar","getIn","serverTabBar","navIcons","isFestival","mapDispatchToProps","dispatch","onInitTabBar","onFetchNavIcons","dicTractEvent","home","product","myCenter","MyTabBar","type","props","push","window","scrollTo","category","Category","label","icon","width","height","background","hidden","selectedTab","size","show","get","tabbar_box","fixed","filter","item","map","renderIcon","handlePress","Component"],"mappings":"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","sourcesContent":["import { fetchNavIcons, initTabBar } from 'actions/app'\nimport { TabBar } from 'antd-mobile'\nimport classnames from 'classnames'\nimport { TrackEventTabBar } from 'configs/trackEventLabels'\nimport Router from 'next/router'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { trackClickEvent } from 'utils/piwik'\nimport NewTabBar from './NewTabBar'\nimport styles from './TabBar.less'\n\nconst Item = TabBar.Item\n\nconst mapStateToProps = (state: any) => ({\n  tabBar: state.getIn(['app', 'tabBar']),\n  serverTabBar: state.getIn(['serverApp', 'tabBar']),\n  navIcons: state.getIn(['app', 'navIcons', 'icons']),\n  isFestival: state.getIn(['app', 'navIcons', 'is_festival']),\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onInitTabBar: bindActionCreators(initTabBar, dispatch),\n  onFetchNavIcons: bindActionCreators(fetchNavIcons, dispatch),\n})\n\ninterface InjectProps {\n  tabBar: any\n  serverTabBar: any\n  isFestival: number\n  onInitTabBar: any\n  navIcons: any\n  onFetchNavIcons: any\n}\n\ninterface MyTabBarProps extends Partial<InjectProps> {\n  hidden: boolean\n  selectedTab?: string\n}\n\nexport const dicTractEvent: { [key: string]: string } = {\n  home: 'HomeIcon',\n  product: 'ClassfyIcon',\n  myCenter: 'MineIcon',\n}\n\nclass MyTabBar extends React.Component<MyTabBarProps> {\n  static defaultProps = {\n    hidden: false,\n    selectedTab: '',\n  }\n\n  async componentDidMount() {\n    const { hidden, selectedTab, navIcons, onInitTabBar, onFetchNavIcons } = this.props\n    navIcons.size === 0 && (await onFetchNavIcons())\n    onInitTabBar({ selectedTab, show: !hidden })\n  }\n\n  handlePress = (type: any) => async () => {\n    const { serverTabBar } = this.props\n    await Router.push(serverTabBar.getIn([type, 'link']))\n    window.scrollTo(0, 0)\n    trackClickEvent({\n      category: TrackEventTabBar.Category,\n      label: `${dicTractEvent[type]}`,\n    })\n  }\n\n  renderIcon = (icon: string) => {\n    return (\n      <div\n        style={{\n          width: '22px',\n          height: '22px',\n          background: `url(${icon}) center center /  21px 21px no-repeat`,\n        }}\n      />\n    )\n  }\n\n  render() {\n    const { tabBar, serverTabBar, hidden, isFestival, navIcons } = this.props\n    const selectedTab = tabBar.get('selectedTab')\n    const show = tabBar.get('show')\n    if (isFestival === 1) {\n      return <NewTabBar {...this.props} />\n    }\n\n    return (\n      <div className={classnames(styles.tabbar_box, show && styles.show, !hidden && styles.fixed)}>\n        <TabBar unselectedTintColor=\"#929292\" tintColor=\"#FF5151\" barTintColor=\"white\">\n          {navIcons\n            .filter((item: any) => !serverTabBar.getIn([item.get('key'), 'hide']))\n            .map((item: any) => (\n              <Item\n                icon={this.renderIcon(item.get('icon'))}\n                selectedIcon={this.renderIcon(item.get('select_icon'))}\n                title={item.get('text')}\n                key={item.get('key')}\n                selected={selectedTab === item.get('key')}\n                onPress={this.handlePress(item.get('key'))}\n              />\n            ))}\n        </TabBar>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MyTabBar) as React.ReactType\n"]},"metadata":{},"sourceType":"module"}