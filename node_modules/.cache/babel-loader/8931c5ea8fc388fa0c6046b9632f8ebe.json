{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { Container, Header, TabBar, BreadCrumb } from 'components';\nimport Error from 'containers/Error';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CreditTips from \"./CreditTips\";\nimport InfoList from \"./InfoList\";\nimport { checkLogin } from 'actions/app';\n\nvar CreditEvaluation = function CreditEvaluation(_ref) {\n  var error = _ref.error,\n      assessList = _ref.assessList;\n\n  if (error) {\n    return React.createElement(Error, {\n      statusCode: error.status,\n      errorMsg: error.errorMsg\n    });\n  }\n\n  return null;\n  var containerProps = {\n    renderHeader: React.createElement(Header, null, \"\\u4FE1\\u7528\\u8BC4\\u4F30\\u786E\\u8BA4\"),\n    renderTabBar: React.createElement(TabBar, {\n      hidden: true\n    }),\n    bgColor: '#ffffff'\n  };\n  var creditData = {\n    creditTitle: assessList.get('credit_title'),\n    creditDesc: assessList.get('credit_desc'),\n    creditIcon: assessList.get('credit_icon')\n  };\n  var InfoListData = {\n    creditTips: assessList.get('credit_tips'),\n    submitText: assessList.get('submit_text'),\n    submitStatus: assessList.get('submit_status'),\n    agreementInfo: {\n      agreementMsg: assessList.getIn(['agreement_info', 'agreement_msg']),\n      agreementName: assessList.getIn(['agreement_info', 'agreement_name']),\n      agreementUrl: assessList.getIn(['agreement_info', 'agreement_url'])\n    },\n    stepList: assessList.get('step_list')\n  };\n  return React.createElement(Container, containerProps, React.createElement(BreadCrumb, {\n    list: assessList.get('step_bar')\n  }), React.createElement(CreditTips, creditData), React.createElement(InfoList, InfoListData));\n};\n\nCreditEvaluation.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var store, query, isServer, res, asPath, req, isLogin;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            store = _ref2.store, query = _ref2.query, isServer = _ref2.isServer, res = _ref2.res, asPath = _ref2.asPath, req = _ref2.req;\n            _context.next = 3;\n            return store.dispatch(checkLogin({\n              isServer: isServer,\n              res: res,\n              asPath: asPath,\n              req: req\n            }));\n\n          case 3:\n            isLogin = _context.sent;\n\n            if (isLogin) {// const data = await store.dispatch(getCreditEntrydata({ query, req }))\n              // if (data.status) {\n              //   return { error: data }\n              // }\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    assessList: state.getIn(['myTrade', 'assess', 'list'])\n  };\n};\n\nexport default connect(mapStateToProps)(CreditEvaluation);","map":{"version":3,"sources":["/Users/viser/mobile-next/src/containers/MyTrade/Assess/List/index.tsx"],"names":["Container","Header","TabBar","BreadCrumb","Error","React","connect","CreditTips","InfoList","checkLogin","CreditEvaluation","error","assessList","status","errorMsg","containerProps","renderHeader","renderTabBar","bgColor","creditData","creditTitle","get","creditDesc","creditIcon","InfoListData","creditTips","submitText","submitStatus","agreementInfo","agreementMsg","getIn","agreementName","agreementUrl","stepList","getInitialProps","store","query","isServer","res","asPath","req","dispatch","isLogin","mapStateToProps","state"],"mappings":"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","sourcesContent":["import { GetInitialPropsContext, NextSFC2 } from '@@types/next'\nimport { getCreditEntrydata } from 'actions/myTrade/assess/list'\nimport { Container, Header, TabBar, BreadCrumb } from 'components'\nimport Error from 'containers/Error'\nimport { ErrorObject } from 'interfaces/error'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport CreditTips from './CreditTips'\nimport InfoList from './InfoList'\nimport { checkLogin } from 'actions/app';\n\nexport interface Query {\n  trade_no: string // 订单号\n  pay_no: string // 支付单号\n  type:string //   支付步骤\n}\n\ninterface CreditEvaluationProps extends ErrorObject {\n  assessList: any\n  url: {\n    query: Query\n  }\n}\n\n\nconst CreditEvaluation: NextSFC2<CreditEvaluationProps> = ({ error, assessList }: CreditEvaluationProps) => {\n  if (error) {\n    return <Error statusCode={error.status} errorMsg={error.errorMsg} />\n  }\n  return null\n  const containerProps = {\n    renderHeader: <Header>信用评估确认</Header>,\n    renderTabBar: <TabBar hidden={true} />,\n    bgColor: '#ffffff',\n  }\n\n  const creditData = {\n    creditTitle: assessList.get('credit_title'),\n    creditDesc: assessList.get('credit_desc'),\n    creditIcon: assessList.get('credit_icon'),\n  }\n\n  const InfoListData = {\n    creditTips: assessList.get('credit_tips'),\n    submitText: assessList.get('submit_text'),\n    submitStatus: assessList.get('submit_status'),\n    agreementInfo: {\n      agreementMsg: assessList.getIn(['agreement_info', 'agreement_msg']),\n      agreementName: assessList.getIn(['agreement_info', 'agreement_name']),\n      agreementUrl: assessList.getIn(['agreement_info', 'agreement_url']),\n    },\n    stepList: assessList.get('step_list'),\n  }\n\n  return (\n    <Container {...containerProps}>\n      <BreadCrumb list={ assessList.get('step_bar') }></BreadCrumb>\n      <CreditTips {...creditData} />\n      <InfoList {...InfoListData} />\n    </Container>\n  )\n}\n\nCreditEvaluation.getInitialProps = async ({ store, query , isServer, res, asPath, req }: GetInitialPropsContext) => {\n  const isLogin = await store.dispatch(checkLogin({ isServer, res, asPath, req, }))\n    if (isLogin) {\n      // const data = await store.dispatch(getCreditEntrydata({ query, req }))\n      // if (data.status) {\n      //   return { error: data }\n      // }\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n  assessList: state.getIn(['myTrade', 'assess', 'list']),\n})\n\nexport default connect(mapStateToProps)(CreditEvaluation)\n"]},"metadata":{},"sourceType":"module"}