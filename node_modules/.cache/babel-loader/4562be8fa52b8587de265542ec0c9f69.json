{"ast":null,"code":"import _Flex from \"antd-mobile/lib/flex\";\nimport { checkTradeDone, receiveCheckTradeDone } from 'actions/app';\nimport { Icon, Link } from 'components';\nimport { TrackEventHome } from 'configs/trackEventLabels';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport cookies from 'utils/cookies';\nimport styles from \"./OrderTips.less\";\n\nvar OrderTips = function OrderTips(_ref) {\n  var orderTips = _ref.orderTips,\n      checkTradeDone = _ref.checkTradeDone,\n      closeTips = _ref.closeTips;\n  useEffect(function () {\n    if (cookies.get('hide_order_tips') !== '1') {\n      checkTradeDone();\n    }\n  }, []);\n\n  var handleClose = function handleClose() {\n    cookies.set('hide_order_tips', '1', {\n      expires: new Date(new Date().setMinutes(30, 0, 0))\n    });\n    closeTips({\n      is_have_undone_trade: false,\n      tips: ''\n    });\n  };\n\n  if (!orderTips.get('is_have_undone_trade')) {\n    return null;\n  }\n\n  return React.createElement(_Flex, {\n    className: styles.tips_box\n  }, React.createElement(Icon, {\n    type: require('svg/warning-circle.svg')\n  }), React.createElement(_Flex.Item, null, React.createElement(Link, {\n    className: styles.link,\n    to: \"/myaccount/service/list\",\n    trackEvent: {\n      category: TrackEventHome.Category,\n      label: TrackEventHome.OrderTips.Link\n    }\n  }, orderTips.get('tips'))), React.createElement(Icon, {\n    type: require('svg/close.svg'),\n    onClick: handleClose\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    orderTips: state.getIn(['app', 'orderTips'])\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    checkTradeDone: bindActionCreators(checkTradeDone, dispatch),\n    closeTips: bindActionCreators(receiveCheckTradeDone, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderTips);","map":{"version":3,"sources":["/Users/viser/mobile-next/src/containers/Product/Category/OrderTips.tsx"],"names":["checkTradeDone","receiveCheckTradeDone","Icon","Link","TrackEventHome","React","useEffect","connect","bindActionCreators","cookies","styles","OrderTips","orderTips","closeTips","get","handleClose","set","expires","Date","setMinutes","is_have_undone_trade","tips","tips_box","require","link","category","Category","label","mapStateToProps","state","getIn","mapDispatchToProps","dispatch"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,qBAAzB,QAAsD,aAAtD;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,YAA3B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP;;AAQA,IAAMC,SAAkD,GAAG,SAArDA,SAAqD,OAA8C;AAAA,MAA3CC,SAA2C,QAA3CA,SAA2C;AAAA,MAAhCZ,cAAgC,QAAhCA,cAAgC;AAAA,MAAhBa,SAAgB,QAAhBA,SAAgB;AACvGP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,OAAO,CAACK,GAAR,CAAY,iBAAZ,MAAmC,GAAvC,EAA4C;AAC1Cd,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAMe,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBN,IAAAA,OAAO,CAACO,GAAR,CAAY,iBAAZ,EAA+B,GAA/B,EAAoC;AAAEC,MAAAA,OAAO,EAAE,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,UAAX,CAAsB,EAAtB,EAA0B,CAA1B,EAA6B,CAA7B,CAAT;AAAX,KAApC;AACAN,IAAAA,SAAS,CAAC;AAAEO,MAAAA,oBAAoB,EAAE,KAAxB;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KAAD,CAAT;AACD,GAHD;;AAKA,MAAI,CAACT,SAAS,CAACE,GAAV,CAAc,sBAAd,CAAL,EAA4C;AAC1C,WAAO,IAAP;AACD;;AAED,SACE;AAAM,IAAA,SAAS,EAAEJ,MAAM,CAACY;AAAxB,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEC,OAAO,CAAC,wBAAD;AAAnB,IADF,EAEE,0BAAM,IAAN,QACE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAEb,MAAM,CAACc,IADpB;AAEE,IAAA,EAAE,EAAC,yBAFL;AAGE,IAAA,UAAU,EAAE;AAAEC,MAAAA,QAAQ,EAAErB,cAAc,CAACsB,QAA3B;AAAqCC,MAAAA,KAAK,EAAEvB,cAAc,CAACO,SAAf,CAAyBR;AAArE;AAHd,KAKGS,SAAS,CAACE,GAAV,CAAc,MAAd,CALH,CADF,CAFF,EAWE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAES,OAAO,CAAC,eAAD,CAAnB;AAAsC,IAAA,OAAO,EAAER;AAA/C,IAXF,CADF;AAeD,CA/BD;;AAiCA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAiB;AACvCjB,IAAAA,SAAS,EAAEiB,KAAK,CAACC,KAAN,CAAY,CAAC,KAAD,EAAQ,WAAR,CAAZ;AAD4B,GAAjB;AAAA,CAAxB;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAoB;AAC7ChC,IAAAA,cAAc,EAAEQ,kBAAkB,CAACR,cAAD,EAAiBgC,QAAjB,CADW;AAE7CnB,IAAAA,SAAS,EAAEL,kBAAkB,CAACP,qBAAD,EAAwB+B,QAAxB;AAFgB,GAApB;AAAA,CAA3B;;AAKA,eAAezB,OAAO,CACpBqB,eADoB,EAEpBG,kBAFoB,CAAP,CAGbpB,SAHa,CAAf","sourcesContent":["import { checkTradeDone, receiveCheckTradeDone } from 'actions/app'\nimport { Flex } from 'antd-mobile'\nimport { Icon, Link } from 'components'\nimport { TrackEventHome } from 'configs/trackEventLabels'\nimport { CheckTradeDoneReturns } from 'interfaces/common'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport cookies from 'utils/cookies'\nimport styles from './OrderTips.less'\n\nexport interface OrderTipsProps {\n  orderTips: any\n  checkTradeDone: () => any\n  closeTips: (params: CheckTradeDoneReturns) => void\n}\n\nconst OrderTips: React.FunctionComponent<OrderTipsProps> = ({ orderTips, checkTradeDone, closeTips }) => {\n  useEffect(() => {\n    if (cookies.get('hide_order_tips') !== '1') {\n      checkTradeDone()\n    }\n  }, [])\n\n  const handleClose = () => {\n    cookies.set('hide_order_tips', '1', { expires: new Date(new Date().setMinutes(30, 0, 0)) })\n    closeTips({ is_have_undone_trade: false, tips: '' })\n  }\n\n  if (!orderTips.get('is_have_undone_trade')) {\n    return null\n  }\n\n  return (\n    <Flex className={styles.tips_box}>\n      <Icon type={require('svg/warning-circle.svg')} />\n      <Flex.Item>\n        <Link\n          className={styles.link}\n          to=\"/myaccount/service/list\"\n          trackEvent={{ category: TrackEventHome.Category, label: TrackEventHome.OrderTips.Link }}\n        >\n          {orderTips.get('tips')}\n        </Link>\n      </Flex.Item>\n      <Icon type={require('svg/close.svg')} onClick={handleClose} />\n    </Flex>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  orderTips: state.getIn(['app', 'orderTips']),\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  checkTradeDone: bindActionCreators(checkTradeDone, dispatch),\n  closeTips: bindActionCreators(receiveCheckTradeDone, dispatch),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(OrderTips)\n"]},"metadata":{},"sourceType":"module"}