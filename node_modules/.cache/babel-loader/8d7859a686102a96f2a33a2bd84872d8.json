{"ast":null,"code":"import axios from 'axios';\nimport { baseURL } from \"./config\";\nimport { tools } from 'utils/index'; // 创建axios实例\n\nvar clientService = axios.create({\n  baseURL: baseURL,\n  timeout: 15000 // headers: { 'Cache-Control': 'no-cache' },\n\n}); // request 拦截器\n\nclientService.interceptors.request.use(function (config) {\n  // config.url += `?timestamp=${Math.round(new Date().getTime() / 1000)}`\n  return config;\n}, function (error) {\n  tools.ErrorLog(\"clientService interceptors request error -- \".concat(error)); // return Promise.resolve(error)\n}); // response 拦截器\n\nclientService.interceptors.response.use(function (response) {\n  if (response.data.status && response.data.errorMsg) {\n    return response;\n  }\n\n  return response.data;\n}, function (error) {\n  var request = error.request,\n      response = error.response,\n      code = error.code,\n      message = error.message;\n\n  if (request && response) {\n    tools.ErrorLog(\"clientService interceptors response error -- response: \".concat(response.status, \" \").concat(response.statusText, \"; request -- method: \").concat(request.method, \"; path: \").concat(request._headers && request._headers.host).concat(request.path, \"; header: \").concat(request._header));\n  } else {\n    tools.ErrorLog(\"clientService interceptors response error -- code: \".concat(code, \", message: \").concat(message));\n  } // return Promise.reject(error)\n\n});\nexport default clientService;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/utils/axiosClient.ts"],"names":["axios","baseURL","tools","clientService","create","timeout","interceptors","request","use","config","error","ErrorLog","response","data","status","errorMsg","code","message","statusText","method","_headers","host","path","_header"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT;AACA,SAASC,KAAT,QAAsB,aAAtB,C,CAEA;;AACA,IAAMC,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAa;AACjCH,EAAAA,OAAO,EAAPA,OADiC;AAEjCI,EAAAA,OAAO,EAAE,KAFwB,CAGjC;;AAHiC,CAAb,CAAtB,C,CAMA;;AACAF,aAAa,CAACG,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACE,UAAAC,MAAM,EAAI;AACR;AACA,SAAOA,MAAP;AACD,CAJH,EAKE,UAAAC,KAAK,EAAI;AACPR,EAAAA,KAAK,CAACS,QAAN,uDAA8DD,KAA9D,GADO,CAEP;AACD,CARH,E,CAWA;;AACAP,aAAa,CAACG,YAAd,CAA2BM,QAA3B,CAAoCJ,GAApC,CACE,UAAAI,QAAQ,EAAI;AACV,MAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,IAAwBF,QAAQ,CAACC,IAAT,CAAcE,QAA1C,EAAoD;AAClD,WAAOH,QAAP;AACD;;AACD,SAAOA,QAAQ,CAACC,IAAhB;AACD,CANH,EAOE,UAAAH,KAAK,EAAI;AAAA,MACCH,OADD,GACsCG,KADtC,CACCH,OADD;AAAA,MACUK,QADV,GACsCF,KADtC,CACUE,QADV;AAAA,MACoBI,IADpB,GACsCN,KADtC,CACoBM,IADpB;AAAA,MAC0BC,OAD1B,GACsCP,KADtC,CAC0BO,OAD1B;;AAEP,MAAIV,OAAO,IAAIK,QAAf,EAAyB;AACvBV,IAAAA,KAAK,CAACS,QAAN,kEAC4DC,QAAQ,CAACE,MADrE,cAEIF,QAAQ,CAACM,UAFb,kCAG0BX,OAAO,CAACY,MAHlC,qBAGmDZ,OAAO,CAACa,QAAR,IAAoBb,OAAO,CAACa,QAAR,CAAiBC,IAHxF,SAIId,OAAO,CAACe,IAJZ,uBAKef,OAAO,CAACgB,OALvB;AAOD,GARD,MAQO;AACLrB,IAAAA,KAAK,CAACS,QAAN,8DAAqEK,IAArE,wBAAuFC,OAAvF;AACD,GAZM,CAaP;;AACD,CArBH;AAwBA,eAAed,aAAf","sourcesContent":["import axios from 'axios'\nimport { baseURL } from 'utils/config'\nimport { tools } from 'utils/index'\n\n// 创建axios实例\nconst clientService = axios.create({\n  baseURL,\n  timeout: 15000,\n  // headers: { 'Cache-Control': 'no-cache' },\n})\n\n// request 拦截器\nclientService.interceptors.request.use(\n  config => {\n    // config.url += `?timestamp=${Math.round(new Date().getTime() / 1000)}`\n    return config\n  },\n  error => {\n    tools.ErrorLog(`clientService interceptors request error -- ${error}`)\n    // return Promise.resolve(error)\n  },\n)\n\n// response 拦截器\nclientService.interceptors.response.use(\n  response => {\n    if (response.data.status && response.data.errorMsg) {\n      return response\n    }\n    return response.data\n  },\n  error => {\n    const { request, response, code, message } = error\n    if (request && response) {\n      tools.ErrorLog(\n        `clientService interceptors response error -- response: ${response.status} ${\n          response.statusText\n        }; request -- method: ${request.method}; path: ${request._headers && request._headers.host}${\n          request.path\n        }; header: ${request._header}`,\n      )\n    } else {\n      tools.ErrorLog(`clientService interceptors response error -- code: ${code}, message: ${message}`)\n    }\n    // return Promise.reject(error)\n  },\n)\n\nexport default clientService\n"]},"metadata":{},"sourceType":"module"}