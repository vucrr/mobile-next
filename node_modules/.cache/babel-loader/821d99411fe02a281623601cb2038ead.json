{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport styles from \"./ChooseList.less\";\n\nfunction ChooseList(props) {\n  var _useState = useState(props.options),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var select = function select(index) {\n    return function () {\n      var newOptions = options.map(function (option, i) {\n        if (!props.multi) option.selected = i === index;else {\n          if (i === index) option.selected = !option.selected;\n        }\n        return option;\n      });\n      setOptions(newOptions);\n      var selected = options.filter(function (o) {\n        return o.selected;\n      }).map(function (o) {\n        return {\n          value: o.value,\n          label: o.label\n        };\n      });\n      props.onSelect(props.multi ? selected : selected[0]);\n    };\n  };\n\n  return React.createElement(\"div\", {\n    className: cx(props.className, styles.container)\n  }, options.map(function (item, index) {\n    return React.createElement(\"div\", {\n      onClick: select(index),\n      key: index,\n      className: cx(item.selected && styles.active)\n    }, item.label);\n  }));\n}\n\nChooseList.defaultProps = {\n  multi: false\n};\nexport default ChooseList;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/ChooseList/ChooseList.tsx"],"names":["cx","React","useState","styles","ChooseList","props","options","setOptions","select","index","newOptions","map","option","i","multi","selected","filter","o","value","label","onSelect","className","container","item","active","defaultProps"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP;;AAeA,SAASC,UAAT,CAAoBC,KAApB,EAA4C;AAAA,kBACZH,QAAQ,CAACG,KAAK,CAACC,OAAP,CADI;AAAA;AAAA,MACnCA,OADmC;AAAA,MAC1BC,UAD0B;;AAG1C,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,WAAmB,YAAM;AACtC,UAAMC,UAAU,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAACC,MAAD,EAAiBC,CAAjB,EAA+B;AAC5D,YAAI,CAACR,KAAK,CAACS,KAAX,EAAkBF,MAAM,CAACG,QAAP,GAAkBF,CAAC,KAAKJ,KAAxB,CAAlB,KACK;AACH,cAAII,CAAC,KAAKJ,KAAV,EAAiBG,MAAM,CAACG,QAAP,GAAkB,CAACH,MAAM,CAACG,QAA1B;AAClB;AACD,eAAOH,MAAP;AACD,OANkB,CAAnB;AAOAL,MAAAA,UAAU,CAACG,UAAD,CAAV;AACA,UAAMK,QAAQ,GAAGT,OAAO,CAACU,MAAR,CAAe,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACF,QAAN;AAAA,OAAhB,EAAgCJ,GAAhC,CAAoC,UAAAM,CAAC;AAAA,eAAK;AACzDC,UAAAA,KAAK,EAAED,CAAC,CAACC,KADgD;AAEzDC,UAAAA,KAAK,EAAEF,CAAC,CAACE;AAFgD,SAAL;AAAA,OAArC,CAAjB;AAIAd,MAAAA,KAAK,CAACe,QAAN,CAAef,KAAK,CAACS,KAAN,GAAcC,QAAd,GAAyBA,QAAQ,CAAC,CAAD,CAAhD;AACD,KAdc;AAAA,GAAf;;AAgBA,SACE;AAAK,IAAA,SAAS,EAAEf,EAAE,CAACK,KAAK,CAACgB,SAAP,EAAkBlB,MAAM,CAACmB,SAAzB;AAAlB,KACGhB,OAAO,CAACK,GAAR,CAAY,UAACY,IAAD,EAAed,KAAf;AAAA,WACX;AAAK,MAAA,OAAO,EAAED,MAAM,CAACC,KAAD,CAApB;AAA6B,MAAA,GAAG,EAAEA,KAAlC;AAAyC,MAAA,SAAS,EAAET,EAAE,CAACuB,IAAI,CAACR,QAAL,IAAiBZ,MAAM,CAACqB,MAAzB;AAAtD,OACGD,IAAI,CAACJ,KADR,CADW;AAAA,GAAZ,CADH,CADF;AASD;;AAEDf,UAAU,CAACqB,YAAX,GAA0B;AACxBX,EAAAA,KAAK,EAAE;AADiB,CAA1B;AAIA,eAAeV,UAAf","sourcesContent":["import cx from 'classnames'\nimport React, { useState } from 'react'\nimport styles from './ChooseList.less'\n\ntype Option = {\n  value: string | number\n  label: string\n  selected?: boolean\n}\n\ninterface ChooseListProps {\n  options: Option[]\n  onSelect: (selected: Option | Option[]) => void\n  multi?: boolean\n  className?: any\n}\n\nfunction ChooseList(props: ChooseListProps) {\n  const [options, setOptions] = useState(props.options)\n\n  const select = (index: number) => () => {\n    const newOptions = options.map((option: Option, i: number) => {\n      if (!props.multi) option.selected = i === index\n      else {\n        if (i === index) option.selected = !option.selected\n      }\n      return option\n    })\n    setOptions(newOptions)\n    const selected = options.filter(o => o.selected).map(o => ({\n      value: o.value,\n      label: o.label,\n    }))\n    props.onSelect(props.multi ? selected : selected[0])\n  }\n\n  return (\n    <div className={cx(props.className, styles.container)}>\n      {options.map((item: Option, index: number) => (\n        <div onClick={select(index)} key={index} className={cx(item.selected && styles.active)}>\n          {item.label}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nChooseList.defaultProps = {\n  multi: false,\n}\n\nexport default ChooseList\n"]},"metadata":{},"sourceType":"module"}