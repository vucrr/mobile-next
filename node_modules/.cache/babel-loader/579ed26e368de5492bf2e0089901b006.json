{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Flex from \"antd-mobile/lib/flex\";\nimport { initTabBar } from 'actions/app';\nimport classnames from 'classnames';\nimport { TrackEventTabBar } from 'configs/trackEventLabels';\nimport Router from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { trackClickEvent } from 'utils/piwik';\nimport { delayHandle } from 'utils/tools';\nimport styles from \"./NewTabBar.less\";\nimport { dicTractEvent } from \"./TabBar\";\nvar Item = _Flex.Item;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tabBar: state.getIn(['app', 'tabBar']),\n    serverTabBar: state.getIn(['serverApp', 'tabBar']),\n    navIcons: state.getIn(['app', 'navIcons', 'icons'])\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onInitTabBar: bindActionCreators(initTabBar, dispatch)\n  };\n};\n\nvar MyTabBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyTabBar, _React$Component);\n\n  function MyTabBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyTabBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyTabBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      curSelected: _this.props.selectedTab\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePress\", function (type) {\n      return (\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var serverTabBar;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this.setState({\n                    curSelected: type\n                  });\n\n                  _context.next = 3;\n                  return delayHandle(0.15);\n\n                case 3:\n                  serverTabBar = _this.props.serverTabBar;\n                  _context.next = 6;\n                  return Router.push(serverTabBar.getIn([type, 'link']));\n\n                case 6:\n                  window.scrollTo(0, 0);\n                  trackClickEvent({\n                    category: TrackEventTabBar.Category,\n                    label: \"\".concat(dicTractEvent[type])\n                  });\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))\n      );\n    });\n\n    return _this;\n  }\n\n  _createClass(MyTabBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          tabBar = _this$props.tabBar,\n          serverTabBar = _this$props.serverTabBar,\n          hidden = _this$props.hidden,\n          navIcons = _this$props.navIcons;\n      var curSelected = this.state.curSelected;\n      var show = tabBar.get('show');\n      return React.createElement(_Flex, {\n        className: classnames(styles.tabbar_box, show && styles.show, !hidden && styles.fixed)\n      }, navIcons.filter(function (item) {\n        return !serverTabBar.getIn([item.get('key'), 'hide']);\n      }).map(function (item, key) {\n        return React.createElement(Item, {\n          key: key,\n          className: classnames(styles.item, curSelected === item.get('key') && styles.active),\n          onClick: _this2.handlePress(item.get('key'))\n        }, React.createElement(\"img\", {\n          className: styles.icon,\n          src: curSelected === item.get('key') ? item.get('select_icon') : item.get('icon')\n        }), React.createElement(\"p\", null, item.get('text')));\n      }));\n    }\n  }]);\n\n  return MyTabBar;\n}(React.Component);\n\n_defineProperty(MyTabBar, \"defaultProps\", {\n  hidden: false,\n  selectedTab: ''\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTabBar);","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/TabBar/NewTabBar.tsx"],"names":["initTabBar","classnames","TrackEventTabBar","Router","React","connect","bindActionCreators","trackClickEvent","delayHandle","styles","dicTractEvent","Item","mapStateToProps","state","tabBar","getIn","serverTabBar","navIcons","mapDispatchToProps","dispatch","onInitTabBar","MyTabBar","curSelected","props","selectedTab","type","setState","push","window","scrollTo","category","Category","label","hidden","show","get","tabbar_box","fixed","filter","item","map","key","active","handlePress","icon","Component"],"mappings":"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","sourcesContent":["import { initTabBar } from 'actions/app'\nimport { Flex } from 'antd-mobile'\nimport classnames from 'classnames'\nimport { TrackEventTabBar } from 'configs/trackEventLabels'\nimport Router from 'next/router'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { trackClickEvent } from 'utils/piwik'\nimport { delayHandle } from 'utils/tools'\nimport styles from './NewTabBar.less'\nimport { dicTractEvent } from './TabBar'\n\nconst Item = Flex.Item\n\nconst mapStateToProps = (state: any) => ({\n  tabBar: state.getIn(['app', 'tabBar']),\n  serverTabBar: state.getIn(['serverApp', 'tabBar']),\n  navIcons: state.getIn(['app', 'navIcons', 'icons']),\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onInitTabBar: bindActionCreators(initTabBar, dispatch),\n})\n\ninterface InjectProps {\n  tabBar: any\n  serverTabBar: any\n  navIcons: any\n  onInitTabBar: any\n}\n\ninterface MyTabBarProps extends Partial<InjectProps> {\n  hidden: boolean\n  selectedTab?: string\n}\n\ninterface MyTabBarState {\n  curSelected?: string\n}\n\nclass MyTabBar extends React.Component<MyTabBarProps, MyTabBarState> {\n  static defaultProps = {\n    hidden: false,\n    selectedTab: '',\n  }\n\n  readonly state: Readonly<MyTabBarState> = {\n    curSelected: this.props.selectedTab,\n  }\n\n  handlePress = (type: any) => async () => {\n    this.setState({ curSelected: type })\n    await delayHandle(0.15)\n    const { serverTabBar } = this.props\n    await Router.push(serverTabBar.getIn([type, 'link']))\n    window.scrollTo(0, 0)\n    trackClickEvent({\n      category: TrackEventTabBar.Category,\n      label: `${dicTractEvent[type]}`,\n    })\n  }\n\n  render() {\n    const { tabBar, serverTabBar, hidden, navIcons } = this.props\n    const { curSelected } = this.state\n    const show = tabBar.get('show')\n\n    return (\n      <Flex className={classnames(styles.tabbar_box, show && styles.show, !hidden && styles.fixed)}>\n        {navIcons\n          .filter((item: any) => !serverTabBar.getIn([item.get('key'), 'hide']))\n          .map((item: any, key: number) => (\n            <Item\n              key={key}\n              className={classnames(styles.item, curSelected === item.get('key') && styles.active)}\n              onClick={this.handlePress(item.get('key'))}\n            >\n              <img\n                className={styles.icon}\n                src={curSelected === item.get('key') ? item.get('select_icon') : item.get('icon')}\n              />\n              <p>{item.get('text')}</p>\n            </Item>\n          ))}\n      </Flex>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MyTabBar) as React.ReactType\n"]},"metadata":{},"sourceType":"module"}