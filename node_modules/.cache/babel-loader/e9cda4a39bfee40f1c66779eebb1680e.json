{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport axios from 'axios';\nimport querystring from 'querystring';\nimport { ErrorLog } from \"./tools\"; // 创建 axios 实例\n\nvar axiosServer = axios.create({\n  timeout: 15000,\n  transformRequest: [function (data) {\n    return querystring.stringify(data);\n  }]\n}); // request 拦截器\n\naxiosServer.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  ErrorLog(\"serverService interceptors request error -- \".concat(error)); // Promise.resolve(error)\n}); // response 拦截器\n\naxiosServer.interceptors.response.use(function (res) {\n  if (res.status === 200) {\n    return res.data;\n  }\n\n  return res;\n}, function (error) {\n  var request = error.request,\n      response = error.response,\n      code = error.code,\n      message = error.message;\n\n  if (request && response) {\n    ErrorLog(\"serverService interceptors response error -- response: \".concat(response.status, \" \").concat(response.statusText, \" \").concat(_JSON$stringify(response.data), \"; request -- method: \").concat(request.method, \"; path: \").concat(request._headers && request._headers.host).concat(request.path, \"; header: \").concat(request._header));\n  } else {\n    ErrorLog(\"serverService interceptors response error -- code: \".concat(code, \", message: \").concat(message));\n  }\n});\nexport default axiosServer;","map":{"version":3,"sources":["/Users/viser/mobile-next/server/utils/axiosServer.ts"],"names":["axios","querystring","ErrorLog","axiosServer","create","timeout","transformRequest","data","stringify","interceptors","request","use","config","error","response","res","status","code","message","statusText","method","_headers","host","path","_header"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,QAAT,kB,CAEA;;AACA,IAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,KADsB;AAE/BC,EAAAA,gBAAgB,EAAE,CAChB,UAAAC,IAAI,EAAI;AACN,WAAON,WAAW,CAACO,SAAZ,CAAsBD,IAAtB,CAAP;AACD,GAHe;AAFa,CAAb,CAApB,C,CASA;;AACAJ,WAAW,CAACM,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,UAAAC,MAAM,EAAI;AACR,SAAOA,MAAP;AACD,CAHH,EAIE,UAAAC,KAAK,EAAI;AACPX,EAAAA,QAAQ,uDAAgDW,KAAhD,EAAR,CADO,CAEP;AACD,CAPH,E,CAUA;;AACAV,WAAW,CAACM,YAAZ,CAAyBK,QAAzB,CAAkCH,GAAlC,CACE,UAAAI,GAAG,EAAI;AACL,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,WAAOD,GAAG,CAACR,IAAX;AACD;;AACD,SAAOQ,GAAP;AACD,CANH,EAOE,UAAAF,KAAK,EAAI;AAAA,MACCH,OADD,GACsCG,KADtC,CACCH,OADD;AAAA,MACUI,QADV,GACsCD,KADtC,CACUC,QADV;AAAA,MACoBG,IADpB,GACsCJ,KADtC,CACoBI,IADpB;AAAA,MAC0BC,OAD1B,GACsCL,KADtC,CAC0BK,OAD1B;;AAEP,MAAIR,OAAO,IAAII,QAAf,EAAyB;AACvBZ,IAAAA,QAAQ,kEACoDY,QAAQ,CAACE,MAD7D,cAEJF,QAAQ,CAACK,UAFL,cAGF,gBAAeL,QAAQ,CAACP,IAAxB,CAHE,kCAGmDG,OAAO,CAACU,MAH3D,qBAG4EV,OAAO,CAACW,QAAR,IAChFX,OAAO,CAACW,QAAR,CAAiBC,IAJb,SAIoBZ,OAAO,CAACa,IAJ5B,uBAI6Cb,OAAO,CAACc,OAJrD,EAAR;AAMD,GAPD,MAOO;AACLtB,IAAAA,QAAQ,8DAAuDe,IAAvD,wBAAyEC,OAAzE,EAAR;AACD;AACF,CAnBH;AAsBA,eAAef,WAAf","sourcesContent":["import axios from 'axios'\nimport querystring from 'querystring'\nimport { ErrorLog } from './tools'\n\n// 创建 axios 实例\nconst axiosServer = axios.create({\n  timeout: 15000,\n  transformRequest: [\n    data => {\n      return querystring.stringify(data)\n    },\n  ],\n})\n\n// request 拦截器\naxiosServer.interceptors.request.use(\n  config => {\n    return config\n  },\n  error => {\n    ErrorLog(`serverService interceptors request error -- ${error}`)\n    // Promise.resolve(error)\n  },\n)\n\n// response 拦截器\naxiosServer.interceptors.response.use(\n  res => {\n    if (res.status === 200) {\n      return res.data\n    }\n    return res\n  },\n  error => {\n    const { request, response, code, message } = error\n    if (request && response) {\n      ErrorLog(\n        `serverService interceptors response error -- response: ${response.status} ${\n          response.statusText\n        } ${JSON.stringify(response.data)}; request -- method: ${request.method}; path: ${request._headers &&\n          request._headers.host}${request.path}; header: ${request._header}`,\n      )\n    } else {\n      ErrorLog(`serverService interceptors response error -- code: ${code}, message: ${message}`)\n    }\n  },\n)\n\nexport default axiosServer\n"]},"metadata":{},"sourceType":"module"}