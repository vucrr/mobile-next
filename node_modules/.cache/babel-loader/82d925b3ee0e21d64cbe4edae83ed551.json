{"ast":null,"code":"import _Modal from \"antd-mobile/lib/modal\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport classnames from 'classnames';\nimport React from 'react';\nimport styles from \"./Modal.less\";\n\nfunction closest(el, selector) {\n  var matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n  while (el) {\n    if (matchesSelector.call(el, selector)) {\n      return el;\n    }\n\n    el = el.parentElement;\n  }\n\n  return null;\n}\n\nvar MyModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyModal, _React$Component);\n\n  function MyModal() {\n    _classCallCheck(this, MyModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyModal).apply(this, arguments));\n  }\n\n  _createClass(MyModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          title = _this$props.title,\n          btnText = _this$props.btnText,\n          onClose = _this$props.onClose,\n          className = _this$props.className,\n          maskClosable = _this$props.maskClosable,\n          children = _this$props.children;\n      var isPopup = type === 'popup';\n\n      var onWrapTouchStart = function onWrapTouchStart(e) {\n        // fix touch to scroll background page on iOS\n        if (!/iPhone|iPod|iPad/i.test(navigator.userAgent)) {\n          return;\n        }\n\n        var pNode = closest(e.target, '.am-modal-content');\n\n        if (!pNode) {\n          e.preventDefault();\n        }\n      };\n\n      var modalProps = {\n        title: title && React.createElement(\"span\", {\n          className: styles.title\n        }, title),\n        visible: visible,\n        transparent: !isPopup,\n        popup: isPopup,\n        animationType: isPopup ? 'slide-up' : 'fade',\n        maskClosable: maskClosable,\n        className: classnames(styles.modal_box, !isPopup && styles.transparent, className),\n        wrapProps: {\n          onTouchStart: onWrapTouchStart\n        },\n        onClose: function (_onClose) {\n          function onClose() {\n            return _onClose.apply(this, arguments);\n          }\n\n          onClose.toString = function () {\n            return _onClose.toString();\n          };\n\n          return onClose;\n        }(function () {\n          onClose(false);\n        })\n      };\n      return React.createElement(_Modal, modalProps, isPopup && children, !isPopup && React.createElement(\"div\", {\n        className: styles.text\n      }, children), btnText && React.createElement(\"div\", {\n        className: styles.footer\n      }, React.createElement(\"span\", {\n        className: classnames(styles.btn, 'btn'),\n        onClick: function onClick() {\n          return onClose(false);\n        }\n      }, btnText)));\n    }\n  }]);\n\n  return MyModal;\n}(React.Component);\n\n_defineProperty(MyModal, \"defaultProps\", {\n  visible: false,\n  type: 'transparent',\n  maskClosable: true\n});\n\nexport default MyModal;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/Modal/Modal.tsx"],"names":["classnames","React","styles","closest","el","selector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","MyModal","props","type","visible","title","btnText","onClose","className","maskClosable","children","isPopup","onWrapTouchStart","e","test","navigator","userAgent","pNode","target","preventDefault","modalProps","transparent","popup","animationType","modal_box","wrapProps","onTouchStart","text","footer","btn","Component"],"mappings":"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","sourcesContent":["import { Modal } from 'antd-mobile'\nimport { ModalProps } from 'antd-mobile/lib/modal/Modal'\nimport classnames from 'classnames'\nimport React from 'react'\nimport styles from './Modal.less'\n\nfunction closest(el: any, selector: string) {\n  const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector\n  while (el) {\n    if (matchesSelector.call(el, selector)) {\n      return el\n    }\n    el = el.parentElement\n  }\n  return null\n}\n\ninterface MyModelProps {\n  type?: 'transparent' | 'popup'\n  visible: boolean\n  title?: string\n  btnText?: string\n  onClose: Function\n  className?: string\n  maskClosable?: boolean\n  children?: any\n}\n\nclass MyModal extends React.Component<MyModelProps> {\n  static defaultProps = {\n    visible: false,\n    type: 'transparent',\n    maskClosable: true,\n  }\n\n  render() {\n    const { type, visible, title, btnText, onClose, className, maskClosable, children } = this.props\n\n    const isPopup = type === 'popup'\n\n    const onWrapTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n      // fix touch to scroll background page on iOS\n      if (!/iPhone|iPod|iPad/i.test(navigator.userAgent)) {\n        return\n      }\n      const pNode = closest(e.target, '.am-modal-content')\n      if (!pNode) {\n        e.preventDefault()\n      }\n    }\n\n    const modalProps: ModalProps = {\n      title: title && <span className={styles.title}>{title}</span>,\n      visible,\n      transparent: !isPopup,\n      popup: isPopup,\n      animationType: isPopup ? 'slide-up' : 'fade',\n      maskClosable: maskClosable,\n      className: classnames(styles.modal_box, !isPopup && styles.transparent, className),\n      wrapProps: { onTouchStart: onWrapTouchStart },\n      onClose: () => {\n        onClose(false)\n      },\n    }\n\n    return (\n      <Modal {...modalProps}>\n        {isPopup && children}\n        {!isPopup && <div className={styles.text}>{children}</div>}\n        {btnText && (\n          <div className={styles.footer}>\n            <span className={classnames(styles.btn, 'btn')} onClick={() => onClose(false)}>\n              {btnText}\n            </span>\n          </div>\n        )}\n      </Modal>\n    )\n  }\n}\n\nexport default MyModal\n"]},"metadata":{},"sourceType":"module"}