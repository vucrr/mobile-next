{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar Audio =\n/*#__PURE__*/\nfunction () {\n  function Audio(buffer, context, config) {\n    _classCallCheck(this, Audio);\n\n    _defineProperty(this, \"source\", null);\n\n    _defineProperty(this, \"startedAt\", 0);\n\n    _defineProperty(this, \"pausedAt\", 0);\n\n    _defineProperty(this, \"playing\", false);\n\n    this.buffer = buffer;\n    this.context = context;\n    this.config = config;\n  }\n\n  _createClass(Audio, [{\n    key: \"play\",\n    value: function play() {\n      var offset = this.pausedAt;\n      this.source = this.context.createBufferSource();\n      this.source.loop = !!this.config.loop;\n      this.source.connect(this.context.destination);\n      this.source.buffer = this.buffer;\n      this.source.start(0, offset);\n      this.startedAt = this.context.currentTime - offset;\n      this.pausedAt = 0;\n      this.playing = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.source) {\n        this.source.disconnect();\n        this.source.stop(0);\n        this.source = null;\n      }\n\n      this.pausedAt = 0;\n      this.startedAt = 0;\n      this.playing = false;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var delta = this.context.currentTime - this.startedAt;\n      this.stop();\n      this.pausedAt = delta;\n    }\n  }, {\n    key: \"isPlaying\",\n    get: function get() {\n      return this.playing;\n    }\n  }]);\n\n  return Audio;\n}();\n\nexport default Audio;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/AudioWidget/Audio.ts"],"names":["Audio","buffer","context","config","offset","pausedAt","source","createBufferSource","loop","connect","destination","start","startedAt","currentTime","playing","disconnect","stop","delta"],"mappings":";;;;IAEMA,K;;;AACJ,iBAAmBC,MAAnB,EAA+CC,OAA/C,EAA6EC,MAA7E,EAA8G;AAAA;;AAAA,oCAE/D,IAF+D;;AAAA,uCAG1F,CAH0F;;AAAA,sCAI3F,CAJ2F;;AAAA,qCAK5F,KAL4F;;AAAA;AAAA;AAAA;AAAE;;;;2BAOlG;AACZ,UAAMC,MAAM,GAAG,KAAKC,QAApB;AACA,WAAKC,MAAL,GAAc,KAAKJ,OAAL,CAAaK,kBAAb,EAAd;AACA,WAAKD,MAAL,CAAYE,IAAZ,GAAmB,CAAC,CAAC,KAAKL,MAAL,CAAYK,IAAjC;AACA,WAAKF,MAAL,CAAYG,OAAZ,CAAoB,KAAKP,OAAL,CAAaQ,WAAjC;AACA,WAAKJ,MAAL,CAAYL,MAAZ,GAAqB,KAAKA,MAA1B;AACA,WAAKK,MAAL,CAAYK,KAAZ,CAAkB,CAAlB,EAAqBP,MAArB;AACA,WAAKQ,SAAL,GAAiB,KAAKV,OAAL,CAAaW,WAAb,GAA2BT,MAA5C;AACA,WAAKC,QAAL,GAAgB,CAAhB;AACA,WAAKS,OAAL,GAAe,IAAf;AACD;;;2BAEa;AACZ,UAAI,KAAKR,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYS,UAAZ;AACA,aAAKT,MAAL,CAAYU,IAAZ,CAAiB,CAAjB;AACA,aAAKV,MAAL,GAAc,IAAd;AACD;;AACD,WAAKD,QAAL,GAAgB,CAAhB;AACA,WAAKO,SAAL,GAAiB,CAAjB;AACA,WAAKE,OAAL,GAAe,KAAf;AACD;;;4BAEc;AACb,UAAMG,KAAK,GAAG,KAAKf,OAAL,CAAaW,WAAb,GAA2B,KAAKD,SAA9C;AACA,WAAKI,IAAL;AACA,WAAKX,QAAL,GAAgBY,KAAhB;AACD;;;wBAEsB;AACrB,aAAO,KAAKH,OAAZ;AACD;;;;;;AAGH,eAAed,KAAf","sourcesContent":["import { OptionalConfig } from './AudioWidget'\n\nclass Audio {\n  constructor(public buffer: AudioBuffer, public context: AudioContext, public config: Partial<OptionalConfig>) {}\n\n  private source: AudioBufferSourceNode | null = null\n  private startedAt = 0\n  private pausedAt = 0\n  private playing = false\n\n  public play() {\n    const offset = this.pausedAt\n    this.source = this.context.createBufferSource()\n    this.source.loop = !!this.config.loop\n    this.source.connect(this.context.destination)\n    this.source.buffer = this.buffer\n    this.source.start(0, offset)\n    this.startedAt = this.context.currentTime - offset\n    this.pausedAt = 0\n    this.playing = true\n  }\n\n  public stop() {\n    if (this.source) {\n      this.source.disconnect()\n      this.source.stop(0)\n      this.source = null\n    }\n    this.pausedAt = 0\n    this.startedAt = 0\n    this.playing = false\n  }\n\n  public pause() {\n    const delta = this.context.currentTime - this.startedAt\n    this.stop()\n    this.pausedAt = delta\n  }\n\n  public get isPlaying() {\n    return this.playing\n  }\n}\n\nexport default Audio\n"]},"metadata":{},"sourceType":"module"}