{"ast":null,"code":"import _Icon from \"antd-mobile/lib/icon\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\n\nvar MyIcon = function MyIcon(_ref) {\n  var type = _ref.type,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'xs' : _ref$size,\n      props = _objectWithoutProperties(_ref, [\"type\", \"className\", \"size\"]);\n\n  if (typeof type === 'string') {\n    return React.createElement(_Icon, _extends({\n      className: className,\n      type: type,\n      size: size\n    }, props));\n  }\n\n  return React.createElement(\"svg\", _extends({\n    className: \"am-icon am-icon-\".concat(size, \" am-icon-\").concat(type.default.id, \" \").concat(className)\n  }, props), React.createElement(\"use\", {\n    xlinkHref: \"#\".concat(type.default.id)\n  }));\n};\n\nexport default MyIcon;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/Icon/Icon.tsx"],"names":["React","MyIcon","type","className","size","props","default","id"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAeA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAgE;AAAA,MAA7DC,IAA6D,QAA7DA,IAA6D;AAAA,4BAAvDC,SAAuD;AAAA,MAAvDA,SAAuD,+BAA3C,EAA2C;AAAA,uBAAvCC,IAAuC;AAAA,MAAvCA,IAAuC,0BAAhC,IAAgC;AAAA,MAAvBC,KAAuB;;AAC7E,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AAAM,MAAA,SAAS,EAAEC,SAAjB;AAA4B,MAAA,IAAI,EAAED,IAAlC;AAAwC,MAAA,IAAI,EAAEE;AAA9C,OAAwDC,KAAxD,EAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,4BAAqBD,IAArB,sBAAqCF,IAAI,CAACI,OAAL,CAAaC,EAAlD,cAAwDJ,SAAxD;AAAd,KAAuFE,KAAvF,GACE;AAAK,IAAA,SAAS,aAAMH,IAAI,CAACI,OAAL,CAAaC,EAAnB;AAAd,IADF,CADF;AAKD,CAVD;;AAYA,eAAeN,MAAf","sourcesContent":["import { Icon } from 'antd-mobile'\nimport React from 'react'\n\ninterface CustomSVG {\n  default: {\n    id: string\n  }\n}\ninterface IconProps {\n  type: string | CustomSVG\n  className?: string\n  color?: string\n  size?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg'\n  onClick?: React.MouseEventHandler<SVGSVGElement>\n}\n\nconst MyIcon = ({ type, className = '', size = 'xs', ...props }: IconProps) => {\n  if (typeof type === 'string') {\n    return <Icon className={className} type={type} size={size} {...props} />\n  }\n\n  return (\n    <svg className={`am-icon am-icon-${size} am-icon-${type.default.id} ${className}`} {...props}>\n      <use xlinkHref={`#${type.default.id}`} />\n    </svg>\n  )\n}\n\nexport default MyIcon\n"]},"metadata":{},"sourceType":"module"}