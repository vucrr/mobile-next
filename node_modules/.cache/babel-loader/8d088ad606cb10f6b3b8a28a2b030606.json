{"ast":null,"code":"import _Flex from \"antd-mobile/lib/flex\";\nimport _InputItem from \"antd-mobile/lib/input-item\";\nimport _Toast from \"antd-mobile/lib/toast\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { getCaptchaImage, verifyImageAndSendSMS } from 'actions/captcha';\nimport classnames from 'classnames';\nimport { Button } from 'components';\nimport Icon from 'components/Icon';\nimport { SMS_TYPES } from 'constant/common';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { isValidPhone } from 'utils/utilsValid';\nimport styles from \"./CaptchaButton.less\";\n\nvar CaptchaButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CaptchaButton, _React$Component);\n\n  function CaptchaButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CaptchaButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CaptchaButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      showDialog: false,\n      countdown: 60,\n      isCounting: false,\n      tip: '',\n      imageStr: '',\n      imageCaptcha: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"timer\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function () {\n      _this.setState({\n        isCounting: true\n      });\n\n      _this.timer = window.setInterval(function () {\n        var countdown = _this.state.countdown - 1;\n\n        _this.setState({\n          countdown: countdown\n        });\n\n        if (countdown) return;\n        clearInterval(_this.timer);\n\n        _this.setState({\n          countdown: 60,\n          isCounting: false\n        });\n      }, 1000);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, getCaptchaImage, phone, needImage, type, image;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, getCaptchaImage = _this$props.getCaptchaImage, phone = _this$props.phone, needImage = _this$props.needImage, type = _this$props.type;\n\n              if (!needImage) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.setState({\n                showDialog: true,\n                tip: '',\n                imageStr: '',\n                imageCaptcha: ''\n              });\n\n              _context.next = 5;\n              return getCaptchaImage(phone, type);\n\n            case 5:\n              image = _context.sent;\n\n              _this.setState({\n                imageStr: 'data:image/png;base64,' + image\n              });\n\n              _context.next = 9;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"closePanel\", function () {\n      _this.setState({\n        showDialog: false,\n        imageStr: '',\n        tip: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(val) {\n        var _this$props2, verifyImageAndSendSMS, phone, type, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = _this.props, verifyImageAndSendSMS = _this$props2.verifyImageAndSendSMS, phone = _this$props2.phone, type = _this$props2.type;\n\n                _this.setState({\n                  imageCaptcha: val\n                });\n\n                if (!(val && val.length === 4)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return verifyImageAndSendSMS(phone, val, type);\n\n              case 5:\n                data = _context2.sent;\n\n                if (data.send_res) {\n                  // 成功\n                  _this.closePanel();\n\n                  _this.startTimer(); // Dev\n\n\n                  if (data.sms_code) {\n                    _Toast.info('验证码：' + data.sms_code);\n                  }\n                } else {\n                  _this.setState({\n                    tip: data.errorMsg || '验证码验证失败，请重新输入'\n                  });\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(CaptchaButton, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) clearInterval(this.timer);\n    }\n  }, {\n    key: \"renderDialog\",\n    value: function renderDialog() {\n      var dialogStyles = classnames(this.props.dialogClassName, styles.dialog);\n      var _this$state = this.state,\n          tip = _this$state.tip,\n          imageCaptcha = _this$state.imageCaptcha,\n          imageStr = _this$state.imageStr;\n      return React.createElement(\"div\", {\n        className: dialogStyles\n      }, React.createElement(\"div\", {\n        className: styles.panel\n      }, React.createElement(\"div\", {\n        className: styles.close,\n        onClick: this.closePanel\n      }, React.createElement(Icon, {\n        type: require('svg/close.svg')\n      })), React.createElement(\"p\", null, \"\\u8BF7\\u5148\\u8F93\\u5165\\u4E0B\\u65B9\\u6570\\u5B57\"), React.createElement(\"div\", {\n        className: styles.tip\n      }, React.createElement(\"span\", null, tip)), React.createElement(_Flex, {\n        align: \"center\"\n      }, React.createElement(_InputItem, {\n        name: \"imageCaptcha\",\n        value: imageCaptcha,\n        onChange: this.onChange,\n        clear: true,\n        maxLength: 4,\n        className: styles.imageInput,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u56FE\\u5F62\\u9A8C\\u8BC1\\u7801\",\n        disabled: !imageStr\n      }), React.createElement(_Flex, {\n        align: \"center\",\n        justify: \"center\",\n        className: styles.captchaImage,\n        onClick: this.handleClick\n      }, imageStr ? React.createElement(\"img\", {\n        src: imageStr,\n        alt: \"captcha\"\n      }) : React.createElement(Icon, {\n        type: require('svg/placeholder.svg')\n      })))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var needImage = this.props.needImage;\n      var showDialog = this.state.showDialog;\n      var buttonStyles = classnames(this.props.buttonClassName, styles.veriCodeBtn);\n      return React.createElement(React.Fragment, null, React.createElement(Button, {\n        className: buttonStyles,\n        disabled: this.disabled,\n        onClick: this.handleClick\n      }, this.state.isCounting ? this.state.countdown + 'S' : '获取验证码'), needImage && showDialog && this.renderDialog());\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.state.isCounting || !this.props.phone || !isValidPhone(this.props.phone);\n    }\n  }]);\n\n  return CaptchaButton;\n}(React.Component);\n\n_defineProperty(CaptchaButton, \"defaultProps\", {\n  needImage: true,\n  type: SMS_TYPES.BindPhone,\n  auto: false\n});\n\nvar mapDispatch = {\n  getCaptchaImage: getCaptchaImage,\n  verifyImageAndSendSMS: verifyImageAndSendSMS\n};\nexport default connect(null, mapDispatch)(CaptchaButton);","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/CaptchaButton/CaptchaButton.tsx"],"names":["getCaptchaImage","verifyImageAndSendSMS","classnames","Button","Icon","SMS_TYPES","React","connect","isValidPhone","styles","CaptchaButton","showDialog","countdown","isCounting","tip","imageStr","imageCaptcha","setState","timer","window","setInterval","state","clearInterval","props","phone","needImage","type","image","val","length","data","send_res","closePanel","startTimer","sms_code","info","errorMsg","dialogStyles","dialogClassName","dialog","panel","close","require","onChange","imageInput","captchaImage","handleClick","buttonStyles","buttonClassName","veriCodeBtn","disabled","renderDialog","Component","BindPhone","auto","mapDispatch"],"mappings":"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","sourcesContent":["import { getCaptchaImage, verifyImageAndSendSMS } from 'actions/captcha'\nimport { Flex, InputItem, Toast } from 'antd-mobile'\nimport classnames from 'classnames'\nimport { Button } from 'components'\nimport Icon from 'components/Icon'\nimport { SMS_TYPES } from 'constant/common'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { isValidPhone } from 'utils/utilsValid'\nimport styles from './CaptchaButton.less'\n\ninterface CaptchaButtonProps {\n  phone: string\n  type: string // 指定验证码类型\n  needImage?: boolean\n  buttonClassName?: string\n  dialogClassName?: string\n}\n\ninterface InjectedProps {\n  getCaptchaImage: Function\n  verifyImageAndSendSMS: Function\n}\n\ninterface CaptchaButtonState {\n  showDialog: boolean\n  countdown: number\n  isCounting: boolean\n  tip: string\n  imageStr: string\n  imageCaptcha: string\n}\n\nclass CaptchaButton extends React.Component<CaptchaButtonProps & InjectedProps, CaptchaButtonState> {\n  static defaultProps = {\n    needImage: true,\n    type: SMS_TYPES.BindPhone,\n    auto: false,\n  }\n\n  readonly state = {\n    showDialog: false,\n    countdown: 60,\n    isCounting: false,\n    tip: '',\n    imageStr: '',\n    imageCaptcha: '',\n  }\n\n  timer = 0\n\n  startTimer = () => {\n    this.setState({ isCounting: true })\n    this.timer = window.setInterval(() => {\n      const countdown = this.state.countdown - 1\n      this.setState({ countdown })\n      if (countdown) return\n      clearInterval(this.timer)\n      this.setState({ countdown: 60, isCounting: false })\n    }, 1000)\n  }\n\n  handleClick = async () => {\n    const { getCaptchaImage, phone, needImage, type } = this.props\n    if (needImage) {\n      this.setState({\n        showDialog: true,\n        tip: '',\n        imageStr: '',\n        imageCaptcha: '',\n      })\n      const image = await getCaptchaImage(phone, type)\n      this.setState({\n        imageStr: 'data:image/png;base64,' + image,\n      })\n    } else {\n      // not impl\n    }\n  }\n\n  closePanel = () => {\n    this.setState({\n      showDialog: false,\n      imageStr: '',\n      tip: '',\n    })\n  }\n\n  onChange = async (val: string) => {\n    const { verifyImageAndSendSMS, phone, type } = this.props\n    this.setState({\n      imageCaptcha: val,\n    })\n    if (val && val.length === 4) {\n      const data = await verifyImageAndSendSMS(phone, val, type)\n      if (data.send_res) {\n        // 成功\n        this.closePanel()\n        this.startTimer()\n        // Dev\n        if (data.sms_code) {\n          Toast.info('验证码：' + data.sms_code)\n        }\n      } else {\n        this.setState({ tip: data.errorMsg || '验证码验证失败，请重新输入' })\n      }\n    }\n  }\n\n  get disabled() {\n    return this.state.isCounting || !this.props.phone || !isValidPhone(this.props.phone)\n  }\n\n  componentWillUnmount() {\n    if (this.timer) clearInterval(this.timer)\n  }\n\n  renderDialog() {\n    const dialogStyles = classnames(this.props.dialogClassName, styles.dialog)\n    const { tip, imageCaptcha, imageStr } = this.state\n    return (\n      <div className={dialogStyles}>\n        <div className={styles.panel}>\n          <div className={styles.close} onClick={this.closePanel}>\n            <Icon type={require('svg/close.svg')} />\n          </div>\n          <p>请先输入下方数字</p>\n          <div className={styles.tip}>\n            <span>{tip}</span>\n          </div>\n          <Flex align=\"center\">\n            <InputItem\n              name=\"imageCaptcha\"\n              value={imageCaptcha}\n              onChange={this.onChange}\n              clear={true}\n              maxLength={4}\n              className={styles.imageInput}\n              placeholder=\"请输入图形验证码\"\n              disabled={!imageStr}\n            />\n            <Flex align=\"center\" justify=\"center\" className={styles.captchaImage} onClick={this.handleClick}>\n              {imageStr ? <img src={imageStr} alt=\"captcha\" /> : <Icon type={require('svg/placeholder.svg')} />}\n            </Flex>\n          </Flex>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const { needImage } = this.props\n    const { showDialog } = this.state\n    const buttonStyles = classnames(this.props.buttonClassName, styles.veriCodeBtn)\n    return (\n      <>\n        <Button className={buttonStyles} disabled={this.disabled} onClick={this.handleClick}>\n          {this.state.isCounting ? this.state.countdown + 'S' : '获取验证码'}\n        </Button>\n        {needImage && showDialog && this.renderDialog()}\n      </>\n    )\n  }\n}\n\nconst mapDispatch = {\n  getCaptchaImage,\n  verifyImageAndSendSMS,\n}\n\nexport default connect(\n  null,\n  mapDispatch,\n)(CaptchaButton)\n"]},"metadata":{},"sourceType":"module"}