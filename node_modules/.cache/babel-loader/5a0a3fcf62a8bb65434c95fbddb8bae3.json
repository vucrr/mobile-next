{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport classnames from 'classnames';\nimport React from 'react';\nimport Notification from 'rmc-notification';\nimport styles from \"./ErrorMsg.less\";\nvar notification = null;\nvar prefixCls = 'am-toast';\n\nvar handleClose = function handleClose(key) {\n  notification.removeNotice(key);\n  setTimeout(function () {\n    notification.destroy();\n    notification = null;\n  }, 400);\n};\n\nexport default {\n  show: function show(msg) {\n    var _classnames;\n\n    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    Notification.newInstance({\n      prefixCls: prefixCls,\n      style: {},\n      transitionName: 'am-slide-down',\n      className: classnames((_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-mask\"), true), _defineProperty(_classnames, \"\".concat(prefixCls, \"-msg\"), true), _defineProperty(_classnames, \"\".concat(prefixCls, \"-\").concat(className), !!className), _classnames))\n    }, function (n) {\n      return notification = n;\n    });\n\n    var key = _Date$now();\n\n    notification.notice({\n      key: key,\n      content: React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        className: styles.msg,\n        onClick: function onClick() {\n          return handleClose(key);\n        }\n      }, msg)),\n      duration: duration,\n      closable: true,\n      style: {},\n      onClose: function onClose() {\n        handleClose(key);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/viser/mobile-next/src/components/ErrorMsg/ErrorMsg.tsx"],"names":["classnames","React","Notification","styles","notification","prefixCls","handleClose","key","removeNotice","setTimeout","destroy","show","msg","duration","className","newInstance","style","transitionName","n","notice","content","closable","onClose"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,MAAP;AAEA,IAAIC,YAAiC,GAAG,IAAxC;AAEA,IAAMC,SAAS,GAAG,UAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAiB;AACnCH,EAAAA,YAAY,CAAEI,YAAd,CAA2BD,GAA3B;AACAE,EAAAA,UAAU,CAAC,YAAM;AACfL,IAAAA,YAAY,CAAEM,OAAd;AACAN,IAAAA,YAAY,GAAG,IAAf;AACD,GAHS,EAGP,GAHO,CAAV;AAID,CAND;;AAQA,eAAe;AACbO,EAAAA,IAAI,EAAE,cAACC,GAAD,EAA+C;AAAA;;AAAA,QAAjCC,QAAiC,uEAAtB,CAAsB;AAAA,QAAnBC,SAAmB,uEAAP,EAAO;AACnDZ,IAAAA,YAAY,CAACa,WAAb,CACE;AACEV,MAAAA,SAAS,EAATA,SADF;AAEEW,MAAAA,KAAK,EAAE,EAFT;AAGEC,MAAAA,cAAc,EAAE,eAHlB;AAIEH,MAAAA,SAAS,EAAEd,UAAU,2DACfK,SADe,YACI,IADJ,0CAEfA,SAFe,WAEG,IAFH,0CAGfA,SAHe,cAGFS,SAHE,GAGY,CAAC,CAACA,SAHd;AAJvB,KADF,EAWE,UAACI,CAAD;AAAA,aAAsBd,YAAY,GAAGc,CAArC;AAAA,KAXF;;AAcA,QAAMX,GAAG,GAAG,WAAZ;;AAEAH,IAAAA,YAAY,CAAEe,MAAd,CAAqB;AACnBZ,MAAAA,GAAG,EAAHA,GADmB;AAEnBa,MAAAA,OAAO,EACL,0CACE;AAAM,QAAA,SAAS,EAAEjB,MAAM,CAACS,GAAxB;AAA6B,QAAA,OAAO,EAAE;AAAA,iBAAMN,WAAW,CAACC,GAAD,CAAjB;AAAA;AAAtC,SACGK,GADH,CADF,CAHiB;AASnBC,MAAAA,QAAQ,EAARA,QATmB;AAUnBQ,MAAAA,QAAQ,EAAE,IAVS;AAWnBL,MAAAA,KAAK,EAAE,EAXY;AAYnBM,MAAAA,OAZmB,qBAYT;AACRhB,QAAAA,WAAW,CAACC,GAAD,CAAX;AACD;AAdkB,KAArB;AAgBD;AAlCY,CAAf","sourcesContent":["import classnames from 'classnames'\nimport React from 'react'\nimport Notification from 'rmc-notification'\nimport styles from './ErrorMsg.less'\n\nlet notification: Notification | null = null\n\nconst prefixCls = 'am-toast'\n\nconst handleClose = (key: number) => {\n  notification!.removeNotice(key)\n  setTimeout(() => {\n    notification!.destroy()\n    notification = null\n  }, 400)\n}\n\nexport default {\n  show: (msg: string, duration = 2, className = '') => {\n    Notification.newInstance(\n      {\n        prefixCls,\n        style: {},\n        transitionName: 'am-slide-down',\n        className: classnames({\n          [`${prefixCls}-mask`]: true,\n          [`${prefixCls}-msg`]: true,\n          [`${prefixCls}-${className}`]: !!className,\n        }),\n      },\n      (n: Notification) => (notification = n),\n    )\n\n    const key = Date.now()\n\n    notification!.notice({\n      key,\n      content: (\n        <>\n          <span className={styles.msg} onClick={() => handleClose(key)}>\n            {msg}\n          </span>\n        </>\n      ),\n      duration,\n      closable: true,\n      style: {},\n      onClose() {\n        handleClose(key)\n      },\n    })\n  },\n}\n"]},"metadata":{},"sourceType":"module"}