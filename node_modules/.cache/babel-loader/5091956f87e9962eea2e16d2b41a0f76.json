{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Toast from \"antd-mobile/lib/toast\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar AlipayTradePayCode = {\n  success: '9000',\n  // 订单支付成功\n  handle: '8000',\n  // 正在处理中\n  failed: '4000',\n  // 订单支付失败\n  cancel: '6001',\n  // 用户中途取消\n  networkError: '6002',\n  // 网络连接出错\n  forgetPassword: '99' // 用户点击忘记密码导致快捷界面退出(only iOS)\n\n};\n\nfunction AlipayTradePay(_ref) {\n  var orderStr = _ref.orderStr;\n  return new _Promise(function (resolve) {\n    AlipayJSBridge.call('tradePay', {\n      orderStr: orderStr\n    },\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var code;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                code = data.resultCode;\n\n                if (code === AlipayTradePayCode.failed) {\n                  _Toast.info('支付失败，请重试');\n                } else if (code === AlipayTradePayCode.networkError) {\n                  _Toast.info('网络连接出错，请重试');\n                }\n\n                resolve({\n                  code: code,\n                  result: data\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n}\n\nexport { AlipayTradePayCode, AlipayTradePay };","map":{"version":3,"sources":["/Users/viser/mobile-next/src/utils/JSBridge.ts"],"names":["AlipayTradePayCode","success","handle","failed","cancel","networkError","forgetPassword","AlipayTradePay","orderStr","resolve","AlipayJSBridge","call","data","code","resultCode","info","result"],"mappings":";;;;AASA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,OAAO,EAAE,MADgB;AACR;AACjBC,EAAAA,MAAM,EAAE,MAFiB;AAET;AAChBC,EAAAA,MAAM,EAAE,MAHiB;AAGT;AAChBC,EAAAA,MAAM,EAAE,MAJiB;AAIT;AAChBC,EAAAA,YAAY,EAAE,MALW;AAKH;AACtBC,EAAAA,cAAc,EAAE,IANS,CAMH;;AANG,CAA3B;;AASA,SAASC,cAAT,OAA4D;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;AAC1D,SAAO,aAA4D,UAAAC,OAAO,EAAI;AAC5EC,IAAAA,cAAc,CAACC,IAAf,CAAoB,UAApB,EAAgC;AAAEH,MAAAA,QAAQ,EAARA;AAAF,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA8C,iBAAOI,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,gBAAAA,IADsC,GAC/BD,IAAI,CAACE,UAD0B;;AAE5C,oBAAID,IAAI,KAAKb,kBAAkB,CAACG,MAAhC,EAAwC;AACtC,yBAAMY,IAAN,CAAW,UAAX;AACD,iBAFD,MAEO,IAAIF,IAAI,KAAKb,kBAAkB,CAACK,YAAhC,EAA8C;AACnD,yBAAMU,IAAN,CAAW,YAAX;AACD;;AACDN,gBAAAA,OAAO,CAAC;AAAEI,kBAAAA,IAAI,EAAJA,IAAF;AAAQG,kBAAAA,MAAM,EAAEJ;AAAhB,iBAAD,CAAP;;AAP4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA9C;;AAAA;AAAA;AAAA;AAAA;AASD,GAVM,CAAP;AAWD;;AAED,SAASZ,kBAAT,EAA6BO,cAA7B","sourcesContent":["import { Toast } from 'antd-mobile'\n\ninterface AlipayTradePayReturn {\n  resultCode: string // 支付结果状态码\n  callbackUrl: string // 交易成功后应跳转的url,一般为空，除非交易有特殊配置\n  memo: string // 收银台服务端返回的momo字符串\n  result: string // 收银台服务端返回的result字符串\n}\n\nconst AlipayTradePayCode = {\n  success: '9000', // 订单支付成功\n  handle: '8000', // 正在处理中\n  failed: '4000', // 订单支付失败\n  cancel: '6001', // 用户中途取消\n  networkError: '6002', // 网络连接出错\n  forgetPassword: '99', // 用户点击忘记密码导致快捷界面退出(only iOS)\n}\n\nfunction AlipayTradePay({ orderStr }: { orderStr: string }) {\n  return new Promise<{ code: string; result: AlipayTradePayReturn }>(resolve => {\n    AlipayJSBridge.call('tradePay', { orderStr }, async (data: AlipayTradePayReturn) => {\n      const code = data.resultCode\n      if (code === AlipayTradePayCode.failed) {\n        Toast.info('支付失败，请重试')\n      } else if (code === AlipayTradePayCode.networkError) {\n        Toast.info('网络连接出错，请重试')\n      }\n      resolve({ code, result: data })\n    })\n  })\n}\n\nexport { AlipayTradePayCode, AlipayTradePay }\n"]},"metadata":{},"sourceType":"module"}