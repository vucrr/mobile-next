{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n\nvar _handleActions;\n\nimport { CHANGE_POPUP_MODAL_ID, CHANGE_PROPERTY_ITEM, CHANGE_PROPERTY_ITEM_DEFAULT_SELECTED, CHANGE_VAS_LIST_SELECTED, GET_PRODUCT_DETAIL_INFO, GET_PRODUCT_PROPERTY } from 'constant/index';\nimport { fromJS } from 'immutable';\nimport { handleActions } from 'redux-actions';\nvar initialDetail = {\n  idActivity: '',\n  baseInfo: {\n    imageList: [],\n    rentPlan: {},\n    discountList: [],\n    promotionList: [],\n    servicePromise: {},\n    rentProcess: {},\n    commonQuestionList: [],\n    productParam: {},\n    detailImageList: [],\n    newOrderInfo: [],\n    info: {}\n  },\n  property: {\n    popupModalId: 0,\n    // 0： sku选择；1：服务介绍；\n    curRent: null,\n    // 当前选中的合约\n    hasStock: true,\n    // 当前合约的库存状态\n    propertyList: [],\n    // 属性列表\n    checkList: {},\n    // 合法属性列表\n    rentList: {},\n    // 合约列表\n    stockDic: {},\n    // 库存 dic\n    info: {},\n    // 其他展示信息\n    selectedList: {} // 已选中的dic： { pid: id }\n\n  }\n};\nvar detail = handleActions((_handleActions = {}, _defineProperty(_handleActions, GET_PRODUCT_DETAIL_INFO, function (state, _ref) {\n  var payload = _ref.payload;\n  return state.set('baseInfo', fromJS(payload));\n}), _defineProperty(_handleActions, CHANGE_POPUP_MODAL_ID, function (state, _ref2) {\n  var id = _ref2.payload.id;\n  return state.setIn(['property', 'popupModalId'], id);\n}), _defineProperty(_handleActions, GET_PRODUCT_PROPERTY, function (state, _ref3) {\n  var payload = _ref3.payload;\n  var _payload$property = payload.property,\n      propertyList = _payload$property.propertyList,\n      checkList = _payload$property.checkList,\n      rentList = _payload$property.rentList,\n      stockList = _payload$property.stockList,\n      vasList = _payload$property.vasList,\n      info = _payload$property.info,\n      idActivity = payload.idActivity; // 已选中的dic： { pid: id }\n\n  var selectedList = {};\n  var stockDic = {};\n  stockList.forEach(function (item) {\n    stockDic[item.sku_id] = item.quantity;\n  }); // 默认选中0元的服务\n\n  vasList.forEach(function (item) {\n    item.selected = _parseInt(item.price, 10) === 0;\n  });\n  return state.set('idActivity', idActivity).setIn(['property', 'curRent'], null).setIn(['property', 'hasStock'], true).setIn(['property', 'selectedList'], fromJS(selectedList)).setIn(['property', 'propertyList'], fromJS(propertyList)).setIn(['property', 'checkList'], fromJS(checkList)).setIn(['property', 'vasList'], fromJS(vasList)).setIn(['property', 'rentList'], fromJS(rentList)).setIn(['property', 'stockDic'], fromJS(stockDic)).setIn(['property', 'info'], fromJS(info));\n}), _defineProperty(_handleActions, CHANGE_PROPERTY_ITEM, function (state, _ref4) {\n  var _ref4$payload = _ref4.payload,\n      pid = _ref4$payload.pid,\n      id = _ref4$payload.id,\n      selected = _ref4$payload.selected;\n  var selectedList = state.getIn(['property', 'selectedList']); // 新的选择列表\n\n  var newSelectedList = selected ? selectedList.delete(pid) : selectedList.set(pid, id); // 需要改变的属性字典\n\n  var diffPatch = _defineProperty({}, pid, id);\n\n  var newPropertyList = modifyPropertyList(state, newSelectedList, diffPatch);\n\n  var _modifyCurRentAndHasS = modifyCurRentAndHasStock(state, newSelectedList),\n      curRent = _modifyCurRentAndHasS.curRent,\n      hasStock = _modifyCurRentAndHasS.hasStock,\n      selectedListKey = _modifyCurRentAndHasS.selectedListKey;\n\n  return state.setIn(['property', 'propertyList'], newPropertyList).setIn(['property', 'selectedList'], newSelectedList).setIn(['property', 'selectedListKey'], selectedListKey).setIn(['property', 'curRent'], curRent).setIn(['property', 'hasStock'], hasStock);\n}), _defineProperty(_handleActions, CHANGE_PROPERTY_ITEM_DEFAULT_SELECTED, function (state, _ref5) {\n  var selectedList = _ref5.payload.selectedList;\n  // 新的选择列表\n  var newSelectedList = fromJS({}); // 需要改变的属性字典\n\n  var diffPatch = {};\n  var selectedListArr = selectedList.split(';');\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(selectedListArr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var keyValue = _step.value;\n\n      var _keyValue$split = keyValue.split(':'),\n          _keyValue$split2 = _slicedToArray(_keyValue$split, 2),\n          pid = _keyValue$split2[0],\n          id = _keyValue$split2[1];\n\n      newSelectedList = newSelectedList.set(+pid, +id);\n      diffPatch[+pid] = +id;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var newPropertyList = modifyPropertyList(state, newSelectedList, diffPatch);\n\n  var _modifyCurRentAndHasS2 = modifyCurRentAndHasStock(state, newSelectedList),\n      curRent = _modifyCurRentAndHasS2.curRent,\n      hasStock = _modifyCurRentAndHasS2.hasStock;\n\n  return state.setIn(['property', 'propertyList'], newPropertyList).setIn(['property', 'selectedList'], newSelectedList).setIn(['property', 'curRent'], curRent).setIn(['property', 'hasStock'], hasStock);\n}), _defineProperty(_handleActions, CHANGE_VAS_LIST_SELECTED, function (state, _ref6) {\n  var index = _ref6.payload.index;\n  return state.updateIn(['property', 'vasList', index], function (item) {\n    var selected = item.get('selected') || false;\n    return item.set('selected', !selected);\n  });\n}), _handleActions), fromJS(initialDetail));\n/* modify 数据处理方法 */\n// 根据新的diffPatch 生成新的propertyList 并对新的selectedList做检测\n\nfunction modifyPropertyList(state, newSelectedList, diffPatch) {\n  // 所有合法的合约列表\n  var checkList = state.getIn(['property', 'checkList']);\n  var propertyList = state.getIn(['property', 'propertyList']); // 设置默认selected选中状态及默认disabled禁选状态\n\n  return propertyList.map(function (propertyItem) {\n    var valueList = propertyItem.get('value_list'); // 生成新的valueList\n\n    var pid = propertyItem.get('id');\n    var newValueList = valueList.map(function (item) {\n      // 当点击的属性在当前属性列表内，只修改selected选中状态，不影响当前行的disabled状态\n      var id = item.get('id');\n\n      if (diffPatch.hasOwnProperty(pid)) {\n        var selected = id === diffPatch[pid] ? !item.get('selected') : false;\n        return item.set('selected', selected);\n      } // 修改/新增 newSelectedList\n\n\n      var curSelectedList = newSelectedList.set(pid, id).toJS();\n      var canICheck = fromJS(_Object$keys(curSelectedList).map(function (key) {\n        return \"\".concat(key, \":\").concat(curSelectedList[key]);\n      }));\n      var disabled = true;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(checkList), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var ck = _step2.value;\n\n          // 待验证的列表是否为所有合法的合约列表的子集\n          if (canICheck.isSubset(ck)) {\n            disabled = false;\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return item.set('disabled', disabled);\n    });\n    return propertyItem.set('value_list', newValueList);\n  });\n} // 根据新的 selectedList 获取相应合约明细 及 库存状态\n\n\nfunction modifyCurRentAndHasStock(state, selectedList) {\n  // 根据sku选择列表中的id计算合约列表中相应的key\n  var computeSelectedListKey = function computeSelectedListKey(obj) {\n    var list = [];\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = _getIterator(_Object$keys(obj).sort(function (a, b) {\n        return _parseInt(a, 10) - _parseInt(b, 10);\n      })), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var key = _step3.value;\n        list.push(\"\".concat([key], \":\").concat(obj[key]));\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    return list.join(';');\n  }; // 使用计算出的key获取当前相应的合约明细\n\n\n  var selectedListKey = computeSelectedListKey(selectedList.toJS());\n  var curRent = state.getIn(['property', 'rentList', selectedListKey]); // 有库存判断条件：sku没有全选时 || stockDic 里有对应库存的量\n\n  var hasStock = !curRent || state.getIn(['property', 'stockDic', curRent.get('sku_id').toString()]) > 0;\n  return {\n    curRent: curRent,\n    hasStock: hasStock,\n    selectedListKey: selectedListKey\n  };\n}\n\nexport default detail;","map":{"version":3,"sources":["/Users/viser/mobile-next/src/reducers/product/detail.ts"],"names":["CHANGE_POPUP_MODAL_ID","CHANGE_PROPERTY_ITEM","CHANGE_PROPERTY_ITEM_DEFAULT_SELECTED","CHANGE_VAS_LIST_SELECTED","GET_PRODUCT_DETAIL_INFO","GET_PRODUCT_PROPERTY","fromJS","handleActions","initialDetail","idActivity","baseInfo","imageList","rentPlan","discountList","promotionList","servicePromise","rentProcess","commonQuestionList","productParam","detailImageList","newOrderInfo","info","property","popupModalId","curRent","hasStock","propertyList","checkList","rentList","stockDic","selectedList","detail","state","payload","set","id","setIn","stockList","vasList","forEach","item","sku_id","quantity","selected","price","pid","getIn","newSelectedList","delete","diffPatch","newPropertyList","modifyPropertyList","modifyCurRentAndHasStock","selectedListKey","selectedListArr","split","keyValue","index","updateIn","get","map","propertyItem","valueList","newValueList","hasOwnProperty","curSelectedList","toJS","canICheck","key","disabled","ck","isSubset","computeSelectedListKey","obj","list","sort","a","b","push","join","toString"],"mappings":"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","sourcesContent":["import {\n  CHANGE_POPUP_MODAL_ID,\n  CHANGE_PROPERTY_ITEM,\n  CHANGE_PROPERTY_ITEM_DEFAULT_SELECTED,\n  CHANGE_VAS_LIST_SELECTED,\n  GET_PRODUCT_DETAIL_INFO,\n  GET_PRODUCT_PROPERTY,\n} from 'constant/index'\nimport { fromJS } from 'immutable'\nimport { handleActions } from 'redux-actions'\n\nconst initialDetail: any = {\n  idActivity: '',\n  baseInfo: {\n    imageList: [],\n    rentPlan: {},\n    discountList: [],\n    promotionList: [],\n    servicePromise: {},\n    rentProcess: {},\n    commonQuestionList: [],\n    productParam: {},\n    detailImageList: [],\n    newOrderInfo: [],\n    info: {},\n  },\n  property: {\n    popupModalId: 0, // 0： sku选择；1：服务介绍；\n    curRent: null, // 当前选中的合约\n    hasStock: true, // 当前合约的库存状态\n    propertyList: [], // 属性列表\n    checkList: {}, // 合法属性列表\n    rentList: {}, // 合约列表\n    stockDic: {}, // 库存 dic\n    info: {}, // 其他展示信息\n    selectedList: {}, // 已选中的dic： { pid: id }\n  },\n}\n\nconst detail = handleActions(\n  {\n    [GET_PRODUCT_DETAIL_INFO](state, { payload }) {\n      return state.set('baseInfo', fromJS(payload))\n    },\n    [CHANGE_POPUP_MODAL_ID](state, { payload: { id } }) {\n      return state.setIn(['property', 'popupModalId'], id)\n    },\n    [GET_PRODUCT_PROPERTY](state, { payload }) {\n      const {\n        property: { propertyList, checkList, rentList, stockList, vasList, info },\n        idActivity,\n      } = payload\n\n      // 已选中的dic： { pid: id }\n      const selectedList: any = {}\n\n      const stockDic: any = {}\n\n      stockList.forEach((item: any) => {\n        stockDic[item.sku_id] = item.quantity\n      })\n\n      // 默认选中0元的服务\n      vasList.forEach((item: any) => {\n        item.selected = parseInt(item.price, 10) === 0\n      })\n\n      return state\n        .set('idActivity', idActivity)\n        .setIn(['property', 'curRent'], null)\n        .setIn(['property', 'hasStock'], true)\n        .setIn(['property', 'selectedList'], fromJS(selectedList))\n        .setIn(['property', 'propertyList'], fromJS(propertyList))\n        .setIn(['property', 'checkList'], fromJS(checkList))\n        .setIn(['property', 'vasList'], fromJS(vasList))\n        .setIn(['property', 'rentList'], fromJS(rentList))\n        .setIn(['property', 'stockDic'], fromJS(stockDic))\n        .setIn(['property', 'info'], fromJS(info))\n    },\n    [CHANGE_PROPERTY_ITEM](state, { payload: { pid, id, selected } }) {\n      const selectedList = state.getIn(['property', 'selectedList'])\n      // 新的选择列表\n      const newSelectedList = selected ? selectedList.delete(pid) : selectedList.set(pid, id)\n      // 需要改变的属性字典\n      const diffPatch = { [pid]: id }\n\n      const newPropertyList = modifyPropertyList(state, newSelectedList, diffPatch)\n\n      const { curRent, hasStock, selectedListKey } = modifyCurRentAndHasStock(state, newSelectedList)\n\n      return state\n        .setIn(['property', 'propertyList'], newPropertyList)\n        .setIn(['property', 'selectedList'], newSelectedList)\n        .setIn(['property', 'selectedListKey'], selectedListKey)\n        .setIn(['property', 'curRent'], curRent)\n        .setIn(['property', 'hasStock'], hasStock)\n    },\n    [CHANGE_PROPERTY_ITEM_DEFAULT_SELECTED](state, { payload: { selectedList } }) {\n      // 新的选择列表\n      let newSelectedList: any = fromJS({})\n      // 需要改变的属性字典\n      const diffPatch: any = {}\n\n      const selectedListArr = selectedList.split(';')\n\n      for (const keyValue of selectedListArr) {\n        const [pid, id] = keyValue.split(':')\n        newSelectedList = newSelectedList.set(+pid, +id)\n        diffPatch[+pid] = +id\n      }\n\n      const newPropertyList = modifyPropertyList(state, newSelectedList, diffPatch)\n\n      const { curRent, hasStock } = modifyCurRentAndHasStock(state, newSelectedList)\n\n      return state\n        .setIn(['property', 'propertyList'], newPropertyList)\n        .setIn(['property', 'selectedList'], newSelectedList)\n        .setIn(['property', 'curRent'], curRent)\n        .setIn(['property', 'hasStock'], hasStock)\n    },\n    [CHANGE_VAS_LIST_SELECTED](state, { payload: { index } }) {\n      return state.updateIn(['property', 'vasList', index], (item: any) => {\n        const selected = item.get('selected') || false\n        return item.set('selected', !selected)\n      })\n    },\n  },\n  fromJS(initialDetail),\n)\n\n/* modify 数据处理方法 */\n\n// 根据新的diffPatch 生成新的propertyList 并对新的selectedList做检测\nfunction modifyPropertyList(state: any, newSelectedList: any, diffPatch: any) {\n  // 所有合法的合约列表\n  const checkList = state.getIn(['property', 'checkList'])\n\n  const propertyList = state.getIn(['property', 'propertyList'])\n\n  // 设置默认selected选中状态及默认disabled禁选状态\n  return propertyList.map((propertyItem: any) => {\n    const valueList = propertyItem.get('value_list')\n\n    // 生成新的valueList\n    const pid = propertyItem.get('id')\n    const newValueList = valueList.map((item: any) => {\n      // 当点击的属性在当前属性列表内，只修改selected选中状态，不影响当前行的disabled状态\n      const id = item.get('id')\n      if (diffPatch.hasOwnProperty(pid)) {\n        const selected = id === diffPatch[pid] ? !item.get('selected') : false\n        return item.set('selected', selected)\n      }\n\n      // 修改/新增 newSelectedList\n      const curSelectedList = newSelectedList.set(pid, id).toJS()\n      const canICheck = fromJS(Object.keys(curSelectedList).map((key: string) => `${key}:${curSelectedList[key]}`))\n      let disabled = true\n      for (const ck of checkList) {\n        // 待验证的列表是否为所有合法的合约列表的子集\n        if (canICheck.isSubset(ck)) {\n          disabled = false\n          break\n        }\n      }\n      return item.set('disabled', disabled)\n    })\n\n    return propertyItem.set('value_list', newValueList)\n  })\n}\n\n// 根据新的 selectedList 获取相应合约明细 及 库存状态\nfunction modifyCurRentAndHasStock(state: any, selectedList: any) {\n  // 根据sku选择列表中的id计算合约列表中相应的key\n  const computeSelectedListKey = (obj: any) => {\n    const list = []\n    for (const key of Object.keys(obj).sort((a: string, b: string) => parseInt(a, 10) - parseInt(b, 10))) {\n      list.push(`${[key]}:${obj[key]}`)\n    }\n    return list.join(';')\n  }\n\n  // 使用计算出的key获取当前相应的合约明细\n  const selectedListKey = computeSelectedListKey(selectedList.toJS())\n  const curRent = state.getIn(['property', 'rentList', selectedListKey])\n  // 有库存判断条件：sku没有全选时 || stockDic 里有对应库存的量\n  const hasStock = !curRent || state.getIn(['property', 'stockDic', curRent.get('sku_id').toString()]) > 0\n  return {\n    curRent,\n    hasStock,\n    selectedListKey,\n  }\n}\n\nexport default detail\n"]},"metadata":{},"sourceType":"module"}